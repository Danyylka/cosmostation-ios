//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: stride/stakeibc/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Stride_Stakeibc_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Stride_Stakeibc_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Stride_Stakeibc_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Stride_Stakeibc_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_QueryParamsRequest, Stride_Stakeibc_QueryParamsResponse>

  func validators(
    _ request: Stride_Stakeibc_QueryGetValidatorsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_QueryGetValidatorsRequest, Stride_Stakeibc_QueryGetValidatorsResponse>

  func hostZone(
    _ request: Stride_Stakeibc_QueryGetHostZoneRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_QueryGetHostZoneRequest, Stride_Stakeibc_QueryGetHostZoneResponse>

  func hostZoneAll(
    _ request: Stride_Stakeibc_QueryAllHostZoneRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_QueryAllHostZoneRequest, Stride_Stakeibc_QueryAllHostZoneResponse>

  func moduleAddress(
    _ request: Stride_Stakeibc_QueryModuleAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_QueryModuleAddressRequest, Stride_Stakeibc_QueryModuleAddressResponse>

  func interchainAccountFromAddress(
    _ request: Stride_Stakeibc_QueryInterchainAccountFromAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_QueryInterchainAccountFromAddressRequest, Stride_Stakeibc_QueryInterchainAccountFromAddressResponse>

  func epochTracker(
    _ request: Stride_Stakeibc_QueryGetEpochTrackerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_QueryGetEpochTrackerRequest, Stride_Stakeibc_QueryGetEpochTrackerResponse>

  func epochTrackerAll(
    _ request: Stride_Stakeibc_QueryAllEpochTrackerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_QueryAllEpochTrackerRequest, Stride_Stakeibc_QueryAllEpochTrackerResponse>

  func nextPacketSequence(
    _ request: Stride_Stakeibc_QueryGetNextPacketSequenceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_QueryGetNextPacketSequenceRequest, Stride_Stakeibc_QueryGetNextPacketSequenceResponse>
}

extension Stride_Stakeibc_QueryClientProtocol {
  internal var serviceName: String {
    return "stride.stakeibc.Query"
  }

  /// Parameters queries the parameters of the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Stride_Stakeibc_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_QueryParamsRequest, Stride_Stakeibc_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: "/stride.stakeibc.Query/Params",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Queries a Validator by host zone.
  ///
  /// - Parameters:
  ///   - request: Request to send to Validators.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func validators(
    _ request: Stride_Stakeibc_QueryGetValidatorsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_QueryGetValidatorsRequest, Stride_Stakeibc_QueryGetValidatorsResponse> {
    return self.makeUnaryCall(
      path: "/stride.stakeibc.Query/Validators",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorsInterceptors() ?? []
    )
  }

  /// Queries a HostZone by id.
  ///
  /// - Parameters:
  ///   - request: Request to send to HostZone.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func hostZone(
    _ request: Stride_Stakeibc_QueryGetHostZoneRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_QueryGetHostZoneRequest, Stride_Stakeibc_QueryGetHostZoneResponse> {
    return self.makeUnaryCall(
      path: "/stride.stakeibc.Query/HostZone",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHostZoneInterceptors() ?? []
    )
  }

  /// Queries a list of HostZone items.
  ///
  /// - Parameters:
  ///   - request: Request to send to HostZoneAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func hostZoneAll(
    _ request: Stride_Stakeibc_QueryAllHostZoneRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_QueryAllHostZoneRequest, Stride_Stakeibc_QueryAllHostZoneResponse> {
    return self.makeUnaryCall(
      path: "/stride.stakeibc.Query/HostZoneAll",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHostZoneAllInterceptors() ?? []
    )
  }

  /// Queries a list of ModuleAddress items.
  ///
  /// - Parameters:
  ///   - request: Request to send to ModuleAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func moduleAddress(
    _ request: Stride_Stakeibc_QueryModuleAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_QueryModuleAddressRequest, Stride_Stakeibc_QueryModuleAddressResponse> {
    return self.makeUnaryCall(
      path: "/stride.stakeibc.Query/ModuleAddress",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModuleAddressInterceptors() ?? []
    )
  }

  /// QueryInterchainAccountFromAddress returns the interchain account for given
  /// owner address on a given connection pair
  ///
  /// - Parameters:
  ///   - request: Request to send to InterchainAccountFromAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func interchainAccountFromAddress(
    _ request: Stride_Stakeibc_QueryInterchainAccountFromAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_QueryInterchainAccountFromAddressRequest, Stride_Stakeibc_QueryInterchainAccountFromAddressResponse> {
    return self.makeUnaryCall(
      path: "/stride.stakeibc.Query/InterchainAccountFromAddress",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInterchainAccountFromAddressInterceptors() ?? []
    )
  }

  /// Queries a EpochTracker by index.
  ///
  /// - Parameters:
  ///   - request: Request to send to EpochTracker.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func epochTracker(
    _ request: Stride_Stakeibc_QueryGetEpochTrackerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_QueryGetEpochTrackerRequest, Stride_Stakeibc_QueryGetEpochTrackerResponse> {
    return self.makeUnaryCall(
      path: "/stride.stakeibc.Query/EpochTracker",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochTrackerInterceptors() ?? []
    )
  }

  /// Queries a list of EpochTracker items.
  ///
  /// - Parameters:
  ///   - request: Request to send to EpochTrackerAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func epochTrackerAll(
    _ request: Stride_Stakeibc_QueryAllEpochTrackerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_QueryAllEpochTrackerRequest, Stride_Stakeibc_QueryAllEpochTrackerResponse> {
    return self.makeUnaryCall(
      path: "/stride.stakeibc.Query/EpochTrackerAll",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochTrackerAllInterceptors() ?? []
    )
  }

  /// Queries the next packet sequence for one for a given channel
  ///
  /// - Parameters:
  ///   - request: Request to send to NextPacketSequence.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func nextPacketSequence(
    _ request: Stride_Stakeibc_QueryGetNextPacketSequenceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_QueryGetNextPacketSequenceRequest, Stride_Stakeibc_QueryGetNextPacketSequenceResponse> {
    return self.makeUnaryCall(
      path: "/stride.stakeibc.Query/NextPacketSequence",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNextPacketSequenceInterceptors() ?? []
    )
  }
}

internal protocol Stride_Stakeibc_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Stride_Stakeibc_QueryParamsRequest, Stride_Stakeibc_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'validators'.
  func makeValidatorsInterceptors() -> [ClientInterceptor<Stride_Stakeibc_QueryGetValidatorsRequest, Stride_Stakeibc_QueryGetValidatorsResponse>]

  /// - Returns: Interceptors to use when invoking 'hostZone'.
  func makeHostZoneInterceptors() -> [ClientInterceptor<Stride_Stakeibc_QueryGetHostZoneRequest, Stride_Stakeibc_QueryGetHostZoneResponse>]

  /// - Returns: Interceptors to use when invoking 'hostZoneAll'.
  func makeHostZoneAllInterceptors() -> [ClientInterceptor<Stride_Stakeibc_QueryAllHostZoneRequest, Stride_Stakeibc_QueryAllHostZoneResponse>]

  /// - Returns: Interceptors to use when invoking 'moduleAddress'.
  func makeModuleAddressInterceptors() -> [ClientInterceptor<Stride_Stakeibc_QueryModuleAddressRequest, Stride_Stakeibc_QueryModuleAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'interchainAccountFromAddress'.
  func makeInterchainAccountFromAddressInterceptors() -> [ClientInterceptor<Stride_Stakeibc_QueryInterchainAccountFromAddressRequest, Stride_Stakeibc_QueryInterchainAccountFromAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'epochTracker'.
  func makeEpochTrackerInterceptors() -> [ClientInterceptor<Stride_Stakeibc_QueryGetEpochTrackerRequest, Stride_Stakeibc_QueryGetEpochTrackerResponse>]

  /// - Returns: Interceptors to use when invoking 'epochTrackerAll'.
  func makeEpochTrackerAllInterceptors() -> [ClientInterceptor<Stride_Stakeibc_QueryAllEpochTrackerRequest, Stride_Stakeibc_QueryAllEpochTrackerResponse>]

  /// - Returns: Interceptors to use when invoking 'nextPacketSequence'.
  func makeNextPacketSequenceInterceptors() -> [ClientInterceptor<Stride_Stakeibc_QueryGetNextPacketSequenceRequest, Stride_Stakeibc_QueryGetNextPacketSequenceResponse>]
}

internal final class Stride_Stakeibc_QueryClient: Stride_Stakeibc_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Stride_Stakeibc_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the stride.stakeibc.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Stride_Stakeibc_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Stride_Stakeibc_QueryProvider: CallHandlerProvider {
  var interceptors: Stride_Stakeibc_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  func params(request: Stride_Stakeibc_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_QueryParamsResponse>

  /// Queries a Validator by host zone.
  func validators(request: Stride_Stakeibc_QueryGetValidatorsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_QueryGetValidatorsResponse>

  /// Queries a HostZone by id.
  func hostZone(request: Stride_Stakeibc_QueryGetHostZoneRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_QueryGetHostZoneResponse>

  /// Queries a list of HostZone items.
  func hostZoneAll(request: Stride_Stakeibc_QueryAllHostZoneRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_QueryAllHostZoneResponse>

  /// Queries a list of ModuleAddress items.
  func moduleAddress(request: Stride_Stakeibc_QueryModuleAddressRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_QueryModuleAddressResponse>

  /// QueryInterchainAccountFromAddress returns the interchain account for given
  /// owner address on a given connection pair
  func interchainAccountFromAddress(request: Stride_Stakeibc_QueryInterchainAccountFromAddressRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_QueryInterchainAccountFromAddressResponse>

  /// Queries a EpochTracker by index.
  func epochTracker(request: Stride_Stakeibc_QueryGetEpochTrackerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_QueryGetEpochTrackerResponse>

  /// Queries a list of EpochTracker items.
  func epochTrackerAll(request: Stride_Stakeibc_QueryAllEpochTrackerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_QueryAllEpochTrackerResponse>

  /// Queries the next packet sequence for one for a given channel
  func nextPacketSequence(request: Stride_Stakeibc_QueryGetNextPacketSequenceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_QueryGetNextPacketSequenceResponse>
}

extension Stride_Stakeibc_QueryProvider {
  internal var serviceName: Substring { return "stride.stakeibc.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "Validators":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_QueryGetValidatorsRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_QueryGetValidatorsResponse>(),
        interceptors: self.interceptors?.makeValidatorsInterceptors() ?? [],
        userFunction: self.validators(request:context:)
      )

    case "HostZone":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_QueryGetHostZoneRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_QueryGetHostZoneResponse>(),
        interceptors: self.interceptors?.makeHostZoneInterceptors() ?? [],
        userFunction: self.hostZone(request:context:)
      )

    case "HostZoneAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_QueryAllHostZoneRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_QueryAllHostZoneResponse>(),
        interceptors: self.interceptors?.makeHostZoneAllInterceptors() ?? [],
        userFunction: self.hostZoneAll(request:context:)
      )

    case "ModuleAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_QueryModuleAddressRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_QueryModuleAddressResponse>(),
        interceptors: self.interceptors?.makeModuleAddressInterceptors() ?? [],
        userFunction: self.moduleAddress(request:context:)
      )

    case "InterchainAccountFromAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_QueryInterchainAccountFromAddressRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_QueryInterchainAccountFromAddressResponse>(),
        interceptors: self.interceptors?.makeInterchainAccountFromAddressInterceptors() ?? [],
        userFunction: self.interchainAccountFromAddress(request:context:)
      )

    case "EpochTracker":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_QueryGetEpochTrackerRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_QueryGetEpochTrackerResponse>(),
        interceptors: self.interceptors?.makeEpochTrackerInterceptors() ?? [],
        userFunction: self.epochTracker(request:context:)
      )

    case "EpochTrackerAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_QueryAllEpochTrackerRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_QueryAllEpochTrackerResponse>(),
        interceptors: self.interceptors?.makeEpochTrackerAllInterceptors() ?? [],
        userFunction: self.epochTrackerAll(request:context:)
      )

    case "NextPacketSequence":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_QueryGetNextPacketSequenceRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_QueryGetNextPacketSequenceResponse>(),
        interceptors: self.interceptors?.makeNextPacketSequenceInterceptors() ?? [],
        userFunction: self.nextPacketSequence(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Stride_Stakeibc_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Stride_Stakeibc_QueryParamsRequest, Stride_Stakeibc_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'validators'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValidatorsInterceptors() -> [ServerInterceptor<Stride_Stakeibc_QueryGetValidatorsRequest, Stride_Stakeibc_QueryGetValidatorsResponse>]

  /// - Returns: Interceptors to use when handling 'hostZone'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeHostZoneInterceptors() -> [ServerInterceptor<Stride_Stakeibc_QueryGetHostZoneRequest, Stride_Stakeibc_QueryGetHostZoneResponse>]

  /// - Returns: Interceptors to use when handling 'hostZoneAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeHostZoneAllInterceptors() -> [ServerInterceptor<Stride_Stakeibc_QueryAllHostZoneRequest, Stride_Stakeibc_QueryAllHostZoneResponse>]

  /// - Returns: Interceptors to use when handling 'moduleAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeModuleAddressInterceptors() -> [ServerInterceptor<Stride_Stakeibc_QueryModuleAddressRequest, Stride_Stakeibc_QueryModuleAddressResponse>]

  /// - Returns: Interceptors to use when handling 'interchainAccountFromAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeInterchainAccountFromAddressInterceptors() -> [ServerInterceptor<Stride_Stakeibc_QueryInterchainAccountFromAddressRequest, Stride_Stakeibc_QueryInterchainAccountFromAddressResponse>]

  /// - Returns: Interceptors to use when handling 'epochTracker'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEpochTrackerInterceptors() -> [ServerInterceptor<Stride_Stakeibc_QueryGetEpochTrackerRequest, Stride_Stakeibc_QueryGetEpochTrackerResponse>]

  /// - Returns: Interceptors to use when handling 'epochTrackerAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEpochTrackerAllInterceptors() -> [ServerInterceptor<Stride_Stakeibc_QueryAllEpochTrackerRequest, Stride_Stakeibc_QueryAllEpochTrackerResponse>]

  /// - Returns: Interceptors to use when handling 'nextPacketSequence'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNextPacketSequenceInterceptors() -> [ServerInterceptor<Stride_Stakeibc_QueryGetNextPacketSequenceRequest, Stride_Stakeibc_QueryGetNextPacketSequenceResponse>]
}
