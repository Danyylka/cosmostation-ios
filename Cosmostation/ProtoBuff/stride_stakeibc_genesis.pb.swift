// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stride/stakeibc/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the stakeibc module's genesis state.
struct Stride_Stakeibc_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var params: Stride_Stakeibc_Params {
    get {return _params ?? Stride_Stakeibc_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var portID: String = String()

  /// list of zones that are registered by the protocol
  var icaAccount: Stride_Stakeibc_ICAAccount {
    get {return _icaAccount ?? Stride_Stakeibc_ICAAccount()}
    set {_icaAccount = newValue}
  }
  /// Returns true if `icaAccount` has been explicitly set.
  var hasIcaAccount: Bool {return self._icaAccount != nil}
  /// Clears the value of `icaAccount`. Subsequent reads from it will return its default value.
  mutating func clearIcaAccount() {self._icaAccount = nil}

  var hostZoneList: [Stride_Stakeibc_HostZone] = []

  var hostZoneCount: UInt64 = 0

  /// stores a map from hostZone base denom to hostZone
  var denomToHostZone: Dictionary<String,String> = [:]

  var epochTrackerList: [Stride_Stakeibc_EpochTracker] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Stride_Stakeibc_Params? = nil
  fileprivate var _icaAccount: Stride_Stakeibc_ICAAccount? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stride.stakeibc"

extension Stride_Stakeibc_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .standard(proto: "port_id"),
    4: .standard(proto: "ica_account"),
    5: .standard(proto: "host_zone_list"),
    6: .standard(proto: "host_zone_count"),
    9: .standard(proto: "denom_to_host_zone"),
    10: .standard(proto: "epoch_tracker_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.portID) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._icaAccount) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.hostZoneList) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.hostZoneCount) }()
      case 9: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.denomToHostZone) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.epochTrackerList) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.portID.isEmpty {
      try visitor.visitSingularStringField(value: self.portID, fieldNumber: 2)
    }
    if let v = self._icaAccount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.hostZoneList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.hostZoneList, fieldNumber: 5)
    }
    if self.hostZoneCount != 0 {
      try visitor.visitSingularUInt64Field(value: self.hostZoneCount, fieldNumber: 6)
    }
    if !self.denomToHostZone.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.denomToHostZone, fieldNumber: 9)
    }
    if !self.epochTrackerList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.epochTrackerList, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stride_Stakeibc_GenesisState, rhs: Stride_Stakeibc_GenesisState) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.portID != rhs.portID {return false}
    if lhs._icaAccount != rhs._icaAccount {return false}
    if lhs.hostZoneList != rhs.hostZoneList {return false}
    if lhs.hostZoneCount != rhs.hostZoneCount {return false}
    if lhs.denomToHostZone != rhs.denomToHostZone {return false}
    if lhs.epochTrackerList != rhs.epochTrackerList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
