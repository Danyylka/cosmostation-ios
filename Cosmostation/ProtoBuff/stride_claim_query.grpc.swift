//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: stride/claim/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Stride_Claim_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Stride_Claim_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Stride_Claim_QueryClientInterceptorFactoryProtocol? { get }

  func distributorAccountBalance(
    _ request: Stride_Claim_QueryDistributorAccountBalanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Claim_QueryDistributorAccountBalanceRequest, Stride_Claim_QueryDistributorAccountBalanceResponse>

  func params(
    _ request: Stride_Claim_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Claim_QueryParamsRequest, Stride_Claim_QueryParamsResponse>

  func claimRecord(
    _ request: Stride_Claim_QueryClaimRecordRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Claim_QueryClaimRecordRequest, Stride_Claim_QueryClaimRecordResponse>

  func claimableForAction(
    _ request: Stride_Claim_QueryClaimableForActionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Claim_QueryClaimableForActionRequest, Stride_Claim_QueryClaimableForActionResponse>

  func totalClaimable(
    _ request: Stride_Claim_QueryTotalClaimableRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Claim_QueryTotalClaimableRequest, Stride_Claim_QueryTotalClaimableResponse>

  func userVestings(
    _ request: Stride_Claim_QueryUserVestingsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Claim_QueryUserVestingsRequest, Stride_Claim_QueryUserVestingsResponse>
}

extension Stride_Claim_QueryClientProtocol {
  internal var serviceName: String {
    return "stride.claim.Query"
  }

  /// Unary call to DistributorAccountBalance
  ///
  /// - Parameters:
  ///   - request: Request to send to DistributorAccountBalance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func distributorAccountBalance(
    _ request: Stride_Claim_QueryDistributorAccountBalanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Claim_QueryDistributorAccountBalanceRequest, Stride_Claim_QueryDistributorAccountBalanceResponse> {
    return self.makeUnaryCall(
      path: "/stride.claim.Query/DistributorAccountBalance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDistributorAccountBalanceInterceptors() ?? []
    )
  }

  /// Unary call to Params
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Stride_Claim_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Claim_QueryParamsRequest, Stride_Claim_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: "/stride.claim.Query/Params",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Unary call to ClaimRecord
  ///
  /// - Parameters:
  ///   - request: Request to send to ClaimRecord.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func claimRecord(
    _ request: Stride_Claim_QueryClaimRecordRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Claim_QueryClaimRecordRequest, Stride_Claim_QueryClaimRecordResponse> {
    return self.makeUnaryCall(
      path: "/stride.claim.Query/ClaimRecord",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimRecordInterceptors() ?? []
    )
  }

  /// Unary call to ClaimableForAction
  ///
  /// - Parameters:
  ///   - request: Request to send to ClaimableForAction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func claimableForAction(
    _ request: Stride_Claim_QueryClaimableForActionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Claim_QueryClaimableForActionRequest, Stride_Claim_QueryClaimableForActionResponse> {
    return self.makeUnaryCall(
      path: "/stride.claim.Query/ClaimableForAction",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimableForActionInterceptors() ?? []
    )
  }

  /// Unary call to TotalClaimable
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalClaimable.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func totalClaimable(
    _ request: Stride_Claim_QueryTotalClaimableRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Claim_QueryTotalClaimableRequest, Stride_Claim_QueryTotalClaimableResponse> {
    return self.makeUnaryCall(
      path: "/stride.claim.Query/TotalClaimable",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalClaimableInterceptors() ?? []
    )
  }

  /// Unary call to UserVestings
  ///
  /// - Parameters:
  ///   - request: Request to send to UserVestings.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func userVestings(
    _ request: Stride_Claim_QueryUserVestingsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Claim_QueryUserVestingsRequest, Stride_Claim_QueryUserVestingsResponse> {
    return self.makeUnaryCall(
      path: "/stride.claim.Query/UserVestings",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserVestingsInterceptors() ?? []
    )
  }
}

internal protocol Stride_Claim_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'distributorAccountBalance'.
  func makeDistributorAccountBalanceInterceptors() -> [ClientInterceptor<Stride_Claim_QueryDistributorAccountBalanceRequest, Stride_Claim_QueryDistributorAccountBalanceResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Stride_Claim_QueryParamsRequest, Stride_Claim_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'claimRecord'.
  func makeClaimRecordInterceptors() -> [ClientInterceptor<Stride_Claim_QueryClaimRecordRequest, Stride_Claim_QueryClaimRecordResponse>]

  /// - Returns: Interceptors to use when invoking 'claimableForAction'.
  func makeClaimableForActionInterceptors() -> [ClientInterceptor<Stride_Claim_QueryClaimableForActionRequest, Stride_Claim_QueryClaimableForActionResponse>]

  /// - Returns: Interceptors to use when invoking 'totalClaimable'.
  func makeTotalClaimableInterceptors() -> [ClientInterceptor<Stride_Claim_QueryTotalClaimableRequest, Stride_Claim_QueryTotalClaimableResponse>]

  /// - Returns: Interceptors to use when invoking 'userVestings'.
  func makeUserVestingsInterceptors() -> [ClientInterceptor<Stride_Claim_QueryUserVestingsRequest, Stride_Claim_QueryUserVestingsResponse>]
}

internal final class Stride_Claim_QueryClient: Stride_Claim_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Stride_Claim_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the stride.claim.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Stride_Claim_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Stride_Claim_QueryProvider: CallHandlerProvider {
  var interceptors: Stride_Claim_QueryServerInterceptorFactoryProtocol? { get }

  func distributorAccountBalance(request: Stride_Claim_QueryDistributorAccountBalanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Claim_QueryDistributorAccountBalanceResponse>

  func params(request: Stride_Claim_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Claim_QueryParamsResponse>

  func claimRecord(request: Stride_Claim_QueryClaimRecordRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Claim_QueryClaimRecordResponse>

  func claimableForAction(request: Stride_Claim_QueryClaimableForActionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Claim_QueryClaimableForActionResponse>

  func totalClaimable(request: Stride_Claim_QueryTotalClaimableRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Claim_QueryTotalClaimableResponse>

  func userVestings(request: Stride_Claim_QueryUserVestingsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Claim_QueryUserVestingsResponse>
}

extension Stride_Claim_QueryProvider {
  internal var serviceName: Substring { return "stride.claim.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "DistributorAccountBalance":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Claim_QueryDistributorAccountBalanceRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Claim_QueryDistributorAccountBalanceResponse>(),
        interceptors: self.interceptors?.makeDistributorAccountBalanceInterceptors() ?? [],
        userFunction: self.distributorAccountBalance(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Claim_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Claim_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "ClaimRecord":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Claim_QueryClaimRecordRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Claim_QueryClaimRecordResponse>(),
        interceptors: self.interceptors?.makeClaimRecordInterceptors() ?? [],
        userFunction: self.claimRecord(request:context:)
      )

    case "ClaimableForAction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Claim_QueryClaimableForActionRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Claim_QueryClaimableForActionResponse>(),
        interceptors: self.interceptors?.makeClaimableForActionInterceptors() ?? [],
        userFunction: self.claimableForAction(request:context:)
      )

    case "TotalClaimable":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Claim_QueryTotalClaimableRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Claim_QueryTotalClaimableResponse>(),
        interceptors: self.interceptors?.makeTotalClaimableInterceptors() ?? [],
        userFunction: self.totalClaimable(request:context:)
      )

    case "UserVestings":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Claim_QueryUserVestingsRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Claim_QueryUserVestingsResponse>(),
        interceptors: self.interceptors?.makeUserVestingsInterceptors() ?? [],
        userFunction: self.userVestings(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Stride_Claim_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'distributorAccountBalance'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDistributorAccountBalanceInterceptors() -> [ServerInterceptor<Stride_Claim_QueryDistributorAccountBalanceRequest, Stride_Claim_QueryDistributorAccountBalanceResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Stride_Claim_QueryParamsRequest, Stride_Claim_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'claimRecord'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClaimRecordInterceptors() -> [ServerInterceptor<Stride_Claim_QueryClaimRecordRequest, Stride_Claim_QueryClaimRecordResponse>]

  /// - Returns: Interceptors to use when handling 'claimableForAction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClaimableForActionInterceptors() -> [ServerInterceptor<Stride_Claim_QueryClaimableForActionRequest, Stride_Claim_QueryClaimableForActionResponse>]

  /// - Returns: Interceptors to use when handling 'totalClaimable'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTotalClaimableInterceptors() -> [ServerInterceptor<Stride_Claim_QueryTotalClaimableRequest, Stride_Claim_QueryTotalClaimableResponse>]

  /// - Returns: Interceptors to use when handling 'userVestings'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUserVestingsInterceptors() -> [ServerInterceptor<Stride_Claim_QueryUserVestingsRequest, Stride_Claim_QueryUserVestingsResponse>]
}
