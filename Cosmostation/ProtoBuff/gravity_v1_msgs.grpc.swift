//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: gravity/v1/msgs.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg defines the state transitions possible within gravity
///
/// Usage: instantiate `Gravity_V1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Gravity_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Gravity_V1_MsgClientInterceptorFactoryProtocol? { get }

  func valsetConfirm(
    _ request: Gravity_V1_MsgValsetConfirm,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgValsetConfirm, Gravity_V1_MsgValsetConfirmResponse>

  func sendToEth(
    _ request: Gravity_V1_MsgSendToEth,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgSendToEth, Gravity_V1_MsgSendToEthResponse>

  func requestBatch(
    _ request: Gravity_V1_MsgRequestBatch,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgRequestBatch, Gravity_V1_MsgRequestBatchResponse>

  func confirmBatch(
    _ request: Gravity_V1_MsgConfirmBatch,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgConfirmBatch, Gravity_V1_MsgConfirmBatchResponse>

  func confirmLogicCall(
    _ request: Gravity_V1_MsgConfirmLogicCall,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgConfirmLogicCall, Gravity_V1_MsgConfirmLogicCallResponse>

  func depositClaim(
    _ request: Gravity_V1_MsgDepositClaim,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgDepositClaim, Gravity_V1_MsgDepositClaimResponse>

  func withdrawClaim(
    _ request: Gravity_V1_MsgWithdrawClaim,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgWithdrawClaim, Gravity_V1_MsgWithdrawClaimResponse>

  func valsetUpdateClaim(
    _ request: Gravity_V1_MsgValsetUpdatedClaim,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgValsetUpdatedClaim, Gravity_V1_MsgValsetUpdatedClaimResponse>

  func eRC20DeployedClaim(
    _ request: Gravity_V1_MsgERC20DeployedClaim,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgERC20DeployedClaim, Gravity_V1_MsgERC20DeployedClaimResponse>

  func logicCallExecutedClaim(
    _ request: Gravity_V1_MsgLogicCallExecutedClaim,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgLogicCallExecutedClaim, Gravity_V1_MsgLogicCallExecutedClaimResponse>

  func setOrchestratorAddress(
    _ request: Gravity_V1_MsgSetOrchestratorAddress,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgSetOrchestratorAddress, Gravity_V1_MsgSetOrchestratorAddressResponse>

  func cancelSendToEth(
    _ request: Gravity_V1_MsgCancelSendToEth,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgCancelSendToEth, Gravity_V1_MsgCancelSendToEthResponse>

  func submitBadSignatureEvidence(
    _ request: Gravity_V1_MsgSubmitBadSignatureEvidence,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgSubmitBadSignatureEvidence, Gravity_V1_MsgSubmitBadSignatureEvidenceResponse>
}

extension Gravity_V1_MsgClientProtocol {
  internal var serviceName: String {
    return "gravity.v1.Msg"
  }

  /// Unary call to ValsetConfirm
  ///
  /// - Parameters:
  ///   - request: Request to send to ValsetConfirm.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func valsetConfirm(
    _ request: Gravity_V1_MsgValsetConfirm,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgValsetConfirm, Gravity_V1_MsgValsetConfirmResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Msg/ValsetConfirm",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValsetConfirmInterceptors() ?? []
    )
  }

  /// Unary call to SendToEth
  ///
  /// - Parameters:
  ///   - request: Request to send to SendToEth.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendToEth(
    _ request: Gravity_V1_MsgSendToEth,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgSendToEth, Gravity_V1_MsgSendToEthResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Msg/SendToEth",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendToEthInterceptors() ?? []
    )
  }

  /// Unary call to RequestBatch
  ///
  /// - Parameters:
  ///   - request: Request to send to RequestBatch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func requestBatch(
    _ request: Gravity_V1_MsgRequestBatch,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgRequestBatch, Gravity_V1_MsgRequestBatchResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Msg/RequestBatch",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestBatchInterceptors() ?? []
    )
  }

  /// Unary call to ConfirmBatch
  ///
  /// - Parameters:
  ///   - request: Request to send to ConfirmBatch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func confirmBatch(
    _ request: Gravity_V1_MsgConfirmBatch,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgConfirmBatch, Gravity_V1_MsgConfirmBatchResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Msg/ConfirmBatch",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmBatchInterceptors() ?? []
    )
  }

  /// Unary call to ConfirmLogicCall
  ///
  /// - Parameters:
  ///   - request: Request to send to ConfirmLogicCall.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func confirmLogicCall(
    _ request: Gravity_V1_MsgConfirmLogicCall,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgConfirmLogicCall, Gravity_V1_MsgConfirmLogicCallResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Msg/ConfirmLogicCall",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmLogicCallInterceptors() ?? []
    )
  }

  /// Unary call to DepositClaim
  ///
  /// - Parameters:
  ///   - request: Request to send to DepositClaim.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func depositClaim(
    _ request: Gravity_V1_MsgDepositClaim,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgDepositClaim, Gravity_V1_MsgDepositClaimResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Msg/DepositClaim",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositClaimInterceptors() ?? []
    )
  }

  /// Unary call to WithdrawClaim
  ///
  /// - Parameters:
  ///   - request: Request to send to WithdrawClaim.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdrawClaim(
    _ request: Gravity_V1_MsgWithdrawClaim,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgWithdrawClaim, Gravity_V1_MsgWithdrawClaimResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Msg/WithdrawClaim",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawClaimInterceptors() ?? []
    )
  }

  /// Unary call to ValsetUpdateClaim
  ///
  /// - Parameters:
  ///   - request: Request to send to ValsetUpdateClaim.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func valsetUpdateClaim(
    _ request: Gravity_V1_MsgValsetUpdatedClaim,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgValsetUpdatedClaim, Gravity_V1_MsgValsetUpdatedClaimResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Msg/ValsetUpdateClaim",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValsetUpdateClaimInterceptors() ?? []
    )
  }

  /// Unary call to ERC20DeployedClaim
  ///
  /// - Parameters:
  ///   - request: Request to send to ERC20DeployedClaim.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func eRC20DeployedClaim(
    _ request: Gravity_V1_MsgERC20DeployedClaim,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgERC20DeployedClaim, Gravity_V1_MsgERC20DeployedClaimResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Msg/ERC20DeployedClaim",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeERC20DeployedClaimInterceptors() ?? []
    )
  }

  /// Unary call to LogicCallExecutedClaim
  ///
  /// - Parameters:
  ///   - request: Request to send to LogicCallExecutedClaim.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func logicCallExecutedClaim(
    _ request: Gravity_V1_MsgLogicCallExecutedClaim,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgLogicCallExecutedClaim, Gravity_V1_MsgLogicCallExecutedClaimResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Msg/LogicCallExecutedClaim",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLogicCallExecutedClaimInterceptors() ?? []
    )
  }

  /// Unary call to SetOrchestratorAddress
  ///
  /// - Parameters:
  ///   - request: Request to send to SetOrchestratorAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setOrchestratorAddress(
    _ request: Gravity_V1_MsgSetOrchestratorAddress,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgSetOrchestratorAddress, Gravity_V1_MsgSetOrchestratorAddressResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Msg/SetOrchestratorAddress",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetOrchestratorAddressInterceptors() ?? []
    )
  }

  /// Unary call to CancelSendToEth
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelSendToEth.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancelSendToEth(
    _ request: Gravity_V1_MsgCancelSendToEth,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgCancelSendToEth, Gravity_V1_MsgCancelSendToEthResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Msg/CancelSendToEth",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelSendToEthInterceptors() ?? []
    )
  }

  /// Unary call to SubmitBadSignatureEvidence
  ///
  /// - Parameters:
  ///   - request: Request to send to SubmitBadSignatureEvidence.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func submitBadSignatureEvidence(
    _ request: Gravity_V1_MsgSubmitBadSignatureEvidence,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgSubmitBadSignatureEvidence, Gravity_V1_MsgSubmitBadSignatureEvidenceResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Msg/SubmitBadSignatureEvidence",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitBadSignatureEvidenceInterceptors() ?? []
    )
  }
}

internal protocol Gravity_V1_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'valsetConfirm'.
  func makeValsetConfirmInterceptors() -> [ClientInterceptor<Gravity_V1_MsgValsetConfirm, Gravity_V1_MsgValsetConfirmResponse>]

  /// - Returns: Interceptors to use when invoking 'sendToEth'.
  func makeSendToEthInterceptors() -> [ClientInterceptor<Gravity_V1_MsgSendToEth, Gravity_V1_MsgSendToEthResponse>]

  /// - Returns: Interceptors to use when invoking 'requestBatch'.
  func makeRequestBatchInterceptors() -> [ClientInterceptor<Gravity_V1_MsgRequestBatch, Gravity_V1_MsgRequestBatchResponse>]

  /// - Returns: Interceptors to use when invoking 'confirmBatch'.
  func makeConfirmBatchInterceptors() -> [ClientInterceptor<Gravity_V1_MsgConfirmBatch, Gravity_V1_MsgConfirmBatchResponse>]

  /// - Returns: Interceptors to use when invoking 'confirmLogicCall'.
  func makeConfirmLogicCallInterceptors() -> [ClientInterceptor<Gravity_V1_MsgConfirmLogicCall, Gravity_V1_MsgConfirmLogicCallResponse>]

  /// - Returns: Interceptors to use when invoking 'depositClaim'.
  func makeDepositClaimInterceptors() -> [ClientInterceptor<Gravity_V1_MsgDepositClaim, Gravity_V1_MsgDepositClaimResponse>]

  /// - Returns: Interceptors to use when invoking 'withdrawClaim'.
  func makeWithdrawClaimInterceptors() -> [ClientInterceptor<Gravity_V1_MsgWithdrawClaim, Gravity_V1_MsgWithdrawClaimResponse>]

  /// - Returns: Interceptors to use when invoking 'valsetUpdateClaim'.
  func makeValsetUpdateClaimInterceptors() -> [ClientInterceptor<Gravity_V1_MsgValsetUpdatedClaim, Gravity_V1_MsgValsetUpdatedClaimResponse>]

  /// - Returns: Interceptors to use when invoking 'eRC20DeployedClaim'.
  func makeERC20DeployedClaimInterceptors() -> [ClientInterceptor<Gravity_V1_MsgERC20DeployedClaim, Gravity_V1_MsgERC20DeployedClaimResponse>]

  /// - Returns: Interceptors to use when invoking 'logicCallExecutedClaim'.
  func makeLogicCallExecutedClaimInterceptors() -> [ClientInterceptor<Gravity_V1_MsgLogicCallExecutedClaim, Gravity_V1_MsgLogicCallExecutedClaimResponse>]

  /// - Returns: Interceptors to use when invoking 'setOrchestratorAddress'.
  func makeSetOrchestratorAddressInterceptors() -> [ClientInterceptor<Gravity_V1_MsgSetOrchestratorAddress, Gravity_V1_MsgSetOrchestratorAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'cancelSendToEth'.
  func makeCancelSendToEthInterceptors() -> [ClientInterceptor<Gravity_V1_MsgCancelSendToEth, Gravity_V1_MsgCancelSendToEthResponse>]

  /// - Returns: Interceptors to use when invoking 'submitBadSignatureEvidence'.
  func makeSubmitBadSignatureEvidenceInterceptors() -> [ClientInterceptor<Gravity_V1_MsgSubmitBadSignatureEvidence, Gravity_V1_MsgSubmitBadSignatureEvidenceResponse>]
}

internal final class Gravity_V1_MsgClient: Gravity_V1_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Gravity_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the gravity.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Gravity_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the state transitions possible within gravity
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Gravity_V1_MsgProvider: CallHandlerProvider {
  var interceptors: Gravity_V1_MsgServerInterceptorFactoryProtocol? { get }

  func valsetConfirm(request: Gravity_V1_MsgValsetConfirm, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgValsetConfirmResponse>

  func sendToEth(request: Gravity_V1_MsgSendToEth, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgSendToEthResponse>

  func requestBatch(request: Gravity_V1_MsgRequestBatch, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgRequestBatchResponse>

  func confirmBatch(request: Gravity_V1_MsgConfirmBatch, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgConfirmBatchResponse>

  func confirmLogicCall(request: Gravity_V1_MsgConfirmLogicCall, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgConfirmLogicCallResponse>

  func depositClaim(request: Gravity_V1_MsgDepositClaim, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgDepositClaimResponse>

  func withdrawClaim(request: Gravity_V1_MsgWithdrawClaim, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgWithdrawClaimResponse>

  func valsetUpdateClaim(request: Gravity_V1_MsgValsetUpdatedClaim, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgValsetUpdatedClaimResponse>

  func eRC20DeployedClaim(request: Gravity_V1_MsgERC20DeployedClaim, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgERC20DeployedClaimResponse>

  func logicCallExecutedClaim(request: Gravity_V1_MsgLogicCallExecutedClaim, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgLogicCallExecutedClaimResponse>

  func setOrchestratorAddress(request: Gravity_V1_MsgSetOrchestratorAddress, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgSetOrchestratorAddressResponse>

  func cancelSendToEth(request: Gravity_V1_MsgCancelSendToEth, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgCancelSendToEthResponse>

  func submitBadSignatureEvidence(request: Gravity_V1_MsgSubmitBadSignatureEvidence, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgSubmitBadSignatureEvidenceResponse>
}

extension Gravity_V1_MsgProvider {
  internal var serviceName: Substring { return "gravity.v1.Msg" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ValsetConfirm":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgValsetConfirm>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgValsetConfirmResponse>(),
        interceptors: self.interceptors?.makeValsetConfirmInterceptors() ?? [],
        userFunction: self.valsetConfirm(request:context:)
      )

    case "SendToEth":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgSendToEth>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgSendToEthResponse>(),
        interceptors: self.interceptors?.makeSendToEthInterceptors() ?? [],
        userFunction: self.sendToEth(request:context:)
      )

    case "RequestBatch":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgRequestBatch>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgRequestBatchResponse>(),
        interceptors: self.interceptors?.makeRequestBatchInterceptors() ?? [],
        userFunction: self.requestBatch(request:context:)
      )

    case "ConfirmBatch":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgConfirmBatch>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgConfirmBatchResponse>(),
        interceptors: self.interceptors?.makeConfirmBatchInterceptors() ?? [],
        userFunction: self.confirmBatch(request:context:)
      )

    case "ConfirmLogicCall":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgConfirmLogicCall>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgConfirmLogicCallResponse>(),
        interceptors: self.interceptors?.makeConfirmLogicCallInterceptors() ?? [],
        userFunction: self.confirmLogicCall(request:context:)
      )

    case "DepositClaim":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgDepositClaim>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgDepositClaimResponse>(),
        interceptors: self.interceptors?.makeDepositClaimInterceptors() ?? [],
        userFunction: self.depositClaim(request:context:)
      )

    case "WithdrawClaim":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgWithdrawClaim>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgWithdrawClaimResponse>(),
        interceptors: self.interceptors?.makeWithdrawClaimInterceptors() ?? [],
        userFunction: self.withdrawClaim(request:context:)
      )

    case "ValsetUpdateClaim":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgValsetUpdatedClaim>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgValsetUpdatedClaimResponse>(),
        interceptors: self.interceptors?.makeValsetUpdateClaimInterceptors() ?? [],
        userFunction: self.valsetUpdateClaim(request:context:)
      )

    case "ERC20DeployedClaim":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgERC20DeployedClaim>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgERC20DeployedClaimResponse>(),
        interceptors: self.interceptors?.makeERC20DeployedClaimInterceptors() ?? [],
        userFunction: self.eRC20DeployedClaim(request:context:)
      )

    case "LogicCallExecutedClaim":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgLogicCallExecutedClaim>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgLogicCallExecutedClaimResponse>(),
        interceptors: self.interceptors?.makeLogicCallExecutedClaimInterceptors() ?? [],
        userFunction: self.logicCallExecutedClaim(request:context:)
      )

    case "SetOrchestratorAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgSetOrchestratorAddress>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgSetOrchestratorAddressResponse>(),
        interceptors: self.interceptors?.makeSetOrchestratorAddressInterceptors() ?? [],
        userFunction: self.setOrchestratorAddress(request:context:)
      )

    case "CancelSendToEth":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgCancelSendToEth>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgCancelSendToEthResponse>(),
        interceptors: self.interceptors?.makeCancelSendToEthInterceptors() ?? [],
        userFunction: self.cancelSendToEth(request:context:)
      )

    case "SubmitBadSignatureEvidence":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgSubmitBadSignatureEvidence>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgSubmitBadSignatureEvidenceResponse>(),
        interceptors: self.interceptors?.makeSubmitBadSignatureEvidenceInterceptors() ?? [],
        userFunction: self.submitBadSignatureEvidence(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Gravity_V1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'valsetConfirm'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValsetConfirmInterceptors() -> [ServerInterceptor<Gravity_V1_MsgValsetConfirm, Gravity_V1_MsgValsetConfirmResponse>]

  /// - Returns: Interceptors to use when handling 'sendToEth'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendToEthInterceptors() -> [ServerInterceptor<Gravity_V1_MsgSendToEth, Gravity_V1_MsgSendToEthResponse>]

  /// - Returns: Interceptors to use when handling 'requestBatch'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRequestBatchInterceptors() -> [ServerInterceptor<Gravity_V1_MsgRequestBatch, Gravity_V1_MsgRequestBatchResponse>]

  /// - Returns: Interceptors to use when handling 'confirmBatch'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConfirmBatchInterceptors() -> [ServerInterceptor<Gravity_V1_MsgConfirmBatch, Gravity_V1_MsgConfirmBatchResponse>]

  /// - Returns: Interceptors to use when handling 'confirmLogicCall'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConfirmLogicCallInterceptors() -> [ServerInterceptor<Gravity_V1_MsgConfirmLogicCall, Gravity_V1_MsgConfirmLogicCallResponse>]

  /// - Returns: Interceptors to use when handling 'depositClaim'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDepositClaimInterceptors() -> [ServerInterceptor<Gravity_V1_MsgDepositClaim, Gravity_V1_MsgDepositClaimResponse>]

  /// - Returns: Interceptors to use when handling 'withdrawClaim'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawClaimInterceptors() -> [ServerInterceptor<Gravity_V1_MsgWithdrawClaim, Gravity_V1_MsgWithdrawClaimResponse>]

  /// - Returns: Interceptors to use when handling 'valsetUpdateClaim'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValsetUpdateClaimInterceptors() -> [ServerInterceptor<Gravity_V1_MsgValsetUpdatedClaim, Gravity_V1_MsgValsetUpdatedClaimResponse>]

  /// - Returns: Interceptors to use when handling 'eRC20DeployedClaim'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeERC20DeployedClaimInterceptors() -> [ServerInterceptor<Gravity_V1_MsgERC20DeployedClaim, Gravity_V1_MsgERC20DeployedClaimResponse>]

  /// - Returns: Interceptors to use when handling 'logicCallExecutedClaim'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLogicCallExecutedClaimInterceptors() -> [ServerInterceptor<Gravity_V1_MsgLogicCallExecutedClaim, Gravity_V1_MsgLogicCallExecutedClaimResponse>]

  /// - Returns: Interceptors to use when handling 'setOrchestratorAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetOrchestratorAddressInterceptors() -> [ServerInterceptor<Gravity_V1_MsgSetOrchestratorAddress, Gravity_V1_MsgSetOrchestratorAddressResponse>]

  /// - Returns: Interceptors to use when handling 'cancelSendToEth'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelSendToEthInterceptors() -> [ServerInterceptor<Gravity_V1_MsgCancelSendToEth, Gravity_V1_MsgCancelSendToEthResponse>]

  /// - Returns: Interceptors to use when handling 'submitBadSignatureEvidence'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubmitBadSignatureEvidenceInterceptors() -> [ServerInterceptor<Gravity_V1_MsgSubmitBadSignatureEvidence, Gravity_V1_MsgSubmitBadSignatureEvidenceResponse>]
}
