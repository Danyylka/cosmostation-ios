//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: desmos/profiles/v3/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Desmos_Profiles_V3_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Desmos_Profiles_V3_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Desmos_Profiles_V3_QueryClientInterceptorFactoryProtocol? { get }

  func profile(
    _ request: Desmos_Profiles_V3_QueryProfileRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Profiles_V3_QueryProfileRequest, Desmos_Profiles_V3_QueryProfileResponse>

  func incomingDTagTransferRequests(
    _ request: Desmos_Profiles_V3_QueryIncomingDTagTransferRequestsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Profiles_V3_QueryIncomingDTagTransferRequestsRequest, Desmos_Profiles_V3_QueryIncomingDTagTransferRequestsResponse>

  func chainLinks(
    _ request: Desmos_Profiles_V3_QueryChainLinksRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Profiles_V3_QueryChainLinksRequest, Desmos_Profiles_V3_QueryChainLinksResponse>

  func chainLinkOwners(
    _ request: Desmos_Profiles_V3_QueryChainLinkOwnersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Profiles_V3_QueryChainLinkOwnersRequest, Desmos_Profiles_V3_QueryChainLinkOwnersResponse>

  func defaultExternalAddresses(
    _ request: Desmos_Profiles_V3_QueryDefaultExternalAddressesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Profiles_V3_QueryDefaultExternalAddressesRequest, Desmos_Profiles_V3_QueryDefaultExternalAddressesResponse>

  func applicationLinks(
    _ request: Desmos_Profiles_V3_QueryApplicationLinksRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Profiles_V3_QueryApplicationLinksRequest, Desmos_Profiles_V3_QueryApplicationLinksResponse>

  func applicationLinkByClientID(
    _ request: Desmos_Profiles_V3_QueryApplicationLinkByClientIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Profiles_V3_QueryApplicationLinkByClientIDRequest, Desmos_Profiles_V3_QueryApplicationLinkByClientIDResponse>

  func applicationLinkOwners(
    _ request: Desmos_Profiles_V3_QueryApplicationLinkOwnersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Profiles_V3_QueryApplicationLinkOwnersRequest, Desmos_Profiles_V3_QueryApplicationLinkOwnersResponse>

  func params(
    _ request: Desmos_Profiles_V3_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Profiles_V3_QueryParamsRequest, Desmos_Profiles_V3_QueryParamsResponse>
}

extension Desmos_Profiles_V3_QueryClientProtocol {
  internal var serviceName: String {
    return "desmos.profiles.v3.Query"
  }

  /// Profile queries the profile of a specific user given their DTag or address.
  /// If the queried user does not have a profile, the returned response will
  /// contain a null profile.
  ///
  /// - Parameters:
  ///   - request: Request to send to Profile.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func profile(
    _ request: Desmos_Profiles_V3_QueryProfileRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Profiles_V3_QueryProfileRequest, Desmos_Profiles_V3_QueryProfileResponse> {
    return self.makeUnaryCall(
      path: "/desmos.profiles.v3.Query/Profile",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProfileInterceptors() ?? []
    )
  }

  /// IncomingDTagTransferRequests queries all the DTag transfers requests that
  /// have been made towards the user with the given address
  ///
  /// - Parameters:
  ///   - request: Request to send to IncomingDTagTransferRequests.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func incomingDTagTransferRequests(
    _ request: Desmos_Profiles_V3_QueryIncomingDTagTransferRequestsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Profiles_V3_QueryIncomingDTagTransferRequestsRequest, Desmos_Profiles_V3_QueryIncomingDTagTransferRequestsResponse> {
    return self.makeUnaryCall(
      path: "/desmos.profiles.v3.Query/IncomingDTagTransferRequests",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncomingDTagTransferRequestsInterceptors() ?? []
    )
  }

  /// ChainLinks queries the chain links associated to the given user, if
  /// provided. Otherwise it queries all the chain links stored.
  ///
  /// - Parameters:
  ///   - request: Request to send to ChainLinks.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func chainLinks(
    _ request: Desmos_Profiles_V3_QueryChainLinksRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Profiles_V3_QueryChainLinksRequest, Desmos_Profiles_V3_QueryChainLinksResponse> {
    return self.makeUnaryCall(
      path: "/desmos.profiles.v3.Query/ChainLinks",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainLinksInterceptors() ?? []
    )
  }

  /// ChainLinkOwners queries for the owners of chain links, optionally searching
  /// for a specific chain name and external address
  ///
  /// - Parameters:
  ///   - request: Request to send to ChainLinkOwners.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func chainLinkOwners(
    _ request: Desmos_Profiles_V3_QueryChainLinkOwnersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Profiles_V3_QueryChainLinkOwnersRequest, Desmos_Profiles_V3_QueryChainLinkOwnersResponse> {
    return self.makeUnaryCall(
      path: "/desmos.profiles.v3.Query/ChainLinkOwners",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainLinkOwnersInterceptors() ?? []
    )
  }

  /// DefaultExternalAddresses queries the default addresses associated to the
  /// given user and (optionally) chain name
  ///
  /// - Parameters:
  ///   - request: Request to send to DefaultExternalAddresses.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func defaultExternalAddresses(
    _ request: Desmos_Profiles_V3_QueryDefaultExternalAddressesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Profiles_V3_QueryDefaultExternalAddressesRequest, Desmos_Profiles_V3_QueryDefaultExternalAddressesResponse> {
    return self.makeUnaryCall(
      path: "/desmos.profiles.v3.Query/DefaultExternalAddresses",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDefaultExternalAddressesInterceptors() ?? []
    )
  }

  /// ApplicationLinks queries the applications links associated to the given
  /// user, if provided. Otherwise, it queries all the application links stored.
  ///
  /// - Parameters:
  ///   - request: Request to send to ApplicationLinks.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func applicationLinks(
    _ request: Desmos_Profiles_V3_QueryApplicationLinksRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Profiles_V3_QueryApplicationLinksRequest, Desmos_Profiles_V3_QueryApplicationLinksResponse> {
    return self.makeUnaryCall(
      path: "/desmos.profiles.v3.Query/ApplicationLinks",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeApplicationLinksInterceptors() ?? []
    )
  }

  /// ApplicationLinkByClientID queries a single application link for a given
  /// client id.
  ///
  /// - Parameters:
  ///   - request: Request to send to ApplicationLinkByClientID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func applicationLinkByClientID(
    _ request: Desmos_Profiles_V3_QueryApplicationLinkByClientIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Profiles_V3_QueryApplicationLinkByClientIDRequest, Desmos_Profiles_V3_QueryApplicationLinkByClientIDResponse> {
    return self.makeUnaryCall(
      path: "/desmos.profiles.v3.Query/ApplicationLinkByClientID",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeApplicationLinkByClientIDInterceptors() ?? []
    )
  }

  /// ApplicationLinkOwners queries for the owners of applications links,
  /// optionally searching for a specific application and username.
  ///
  /// - Parameters:
  ///   - request: Request to send to ApplicationLinkOwners.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func applicationLinkOwners(
    _ request: Desmos_Profiles_V3_QueryApplicationLinkOwnersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Profiles_V3_QueryApplicationLinkOwnersRequest, Desmos_Profiles_V3_QueryApplicationLinkOwnersResponse> {
    return self.makeUnaryCall(
      path: "/desmos.profiles.v3.Query/ApplicationLinkOwners",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeApplicationLinkOwnersInterceptors() ?? []
    )
  }

  /// Params queries the profiles module params
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Desmos_Profiles_V3_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Profiles_V3_QueryParamsRequest, Desmos_Profiles_V3_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: "/desmos.profiles.v3.Query/Params",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

internal protocol Desmos_Profiles_V3_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'profile'.
  func makeProfileInterceptors() -> [ClientInterceptor<Desmos_Profiles_V3_QueryProfileRequest, Desmos_Profiles_V3_QueryProfileResponse>]

  /// - Returns: Interceptors to use when invoking 'incomingDTagTransferRequests'.
  func makeIncomingDTagTransferRequestsInterceptors() -> [ClientInterceptor<Desmos_Profiles_V3_QueryIncomingDTagTransferRequestsRequest, Desmos_Profiles_V3_QueryIncomingDTagTransferRequestsResponse>]

  /// - Returns: Interceptors to use when invoking 'chainLinks'.
  func makeChainLinksInterceptors() -> [ClientInterceptor<Desmos_Profiles_V3_QueryChainLinksRequest, Desmos_Profiles_V3_QueryChainLinksResponse>]

  /// - Returns: Interceptors to use when invoking 'chainLinkOwners'.
  func makeChainLinkOwnersInterceptors() -> [ClientInterceptor<Desmos_Profiles_V3_QueryChainLinkOwnersRequest, Desmos_Profiles_V3_QueryChainLinkOwnersResponse>]

  /// - Returns: Interceptors to use when invoking 'defaultExternalAddresses'.
  func makeDefaultExternalAddressesInterceptors() -> [ClientInterceptor<Desmos_Profiles_V3_QueryDefaultExternalAddressesRequest, Desmos_Profiles_V3_QueryDefaultExternalAddressesResponse>]

  /// - Returns: Interceptors to use when invoking 'applicationLinks'.
  func makeApplicationLinksInterceptors() -> [ClientInterceptor<Desmos_Profiles_V3_QueryApplicationLinksRequest, Desmos_Profiles_V3_QueryApplicationLinksResponse>]

  /// - Returns: Interceptors to use when invoking 'applicationLinkByClientID'.
  func makeApplicationLinkByClientIDInterceptors() -> [ClientInterceptor<Desmos_Profiles_V3_QueryApplicationLinkByClientIDRequest, Desmos_Profiles_V3_QueryApplicationLinkByClientIDResponse>]

  /// - Returns: Interceptors to use when invoking 'applicationLinkOwners'.
  func makeApplicationLinkOwnersInterceptors() -> [ClientInterceptor<Desmos_Profiles_V3_QueryApplicationLinkOwnersRequest, Desmos_Profiles_V3_QueryApplicationLinkOwnersResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Desmos_Profiles_V3_QueryParamsRequest, Desmos_Profiles_V3_QueryParamsResponse>]
}

internal final class Desmos_Profiles_V3_QueryClient: Desmos_Profiles_V3_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Desmos_Profiles_V3_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the desmos.profiles.v3.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Desmos_Profiles_V3_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Desmos_Profiles_V3_QueryProvider: CallHandlerProvider {
  var interceptors: Desmos_Profiles_V3_QueryServerInterceptorFactoryProtocol? { get }

  /// Profile queries the profile of a specific user given their DTag or address.
  /// If the queried user does not have a profile, the returned response will
  /// contain a null profile.
  func profile(request: Desmos_Profiles_V3_QueryProfileRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Profiles_V3_QueryProfileResponse>

  /// IncomingDTagTransferRequests queries all the DTag transfers requests that
  /// have been made towards the user with the given address
  func incomingDTagTransferRequests(request: Desmos_Profiles_V3_QueryIncomingDTagTransferRequestsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Profiles_V3_QueryIncomingDTagTransferRequestsResponse>

  /// ChainLinks queries the chain links associated to the given user, if
  /// provided. Otherwise it queries all the chain links stored.
  func chainLinks(request: Desmos_Profiles_V3_QueryChainLinksRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Profiles_V3_QueryChainLinksResponse>

  /// ChainLinkOwners queries for the owners of chain links, optionally searching
  /// for a specific chain name and external address
  func chainLinkOwners(request: Desmos_Profiles_V3_QueryChainLinkOwnersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Profiles_V3_QueryChainLinkOwnersResponse>

  /// DefaultExternalAddresses queries the default addresses associated to the
  /// given user and (optionally) chain name
  func defaultExternalAddresses(request: Desmos_Profiles_V3_QueryDefaultExternalAddressesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Profiles_V3_QueryDefaultExternalAddressesResponse>

  /// ApplicationLinks queries the applications links associated to the given
  /// user, if provided. Otherwise, it queries all the application links stored.
  func applicationLinks(request: Desmos_Profiles_V3_QueryApplicationLinksRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Profiles_V3_QueryApplicationLinksResponse>

  /// ApplicationLinkByClientID queries a single application link for a given
  /// client id.
  func applicationLinkByClientID(request: Desmos_Profiles_V3_QueryApplicationLinkByClientIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Profiles_V3_QueryApplicationLinkByClientIDResponse>

  /// ApplicationLinkOwners queries for the owners of applications links,
  /// optionally searching for a specific application and username.
  func applicationLinkOwners(request: Desmos_Profiles_V3_QueryApplicationLinkOwnersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Profiles_V3_QueryApplicationLinkOwnersResponse>

  /// Params queries the profiles module params
  func params(request: Desmos_Profiles_V3_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Profiles_V3_QueryParamsResponse>
}

extension Desmos_Profiles_V3_QueryProvider {
  internal var serviceName: Substring { return "desmos.profiles.v3.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Profile":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Profiles_V3_QueryProfileRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Profiles_V3_QueryProfileResponse>(),
        interceptors: self.interceptors?.makeProfileInterceptors() ?? [],
        userFunction: self.profile(request:context:)
      )

    case "IncomingDTagTransferRequests":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Profiles_V3_QueryIncomingDTagTransferRequestsRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Profiles_V3_QueryIncomingDTagTransferRequestsResponse>(),
        interceptors: self.interceptors?.makeIncomingDTagTransferRequestsInterceptors() ?? [],
        userFunction: self.incomingDTagTransferRequests(request:context:)
      )

    case "ChainLinks":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Profiles_V3_QueryChainLinksRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Profiles_V3_QueryChainLinksResponse>(),
        interceptors: self.interceptors?.makeChainLinksInterceptors() ?? [],
        userFunction: self.chainLinks(request:context:)
      )

    case "ChainLinkOwners":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Profiles_V3_QueryChainLinkOwnersRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Profiles_V3_QueryChainLinkOwnersResponse>(),
        interceptors: self.interceptors?.makeChainLinkOwnersInterceptors() ?? [],
        userFunction: self.chainLinkOwners(request:context:)
      )

    case "DefaultExternalAddresses":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Profiles_V3_QueryDefaultExternalAddressesRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Profiles_V3_QueryDefaultExternalAddressesResponse>(),
        interceptors: self.interceptors?.makeDefaultExternalAddressesInterceptors() ?? [],
        userFunction: self.defaultExternalAddresses(request:context:)
      )

    case "ApplicationLinks":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Profiles_V3_QueryApplicationLinksRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Profiles_V3_QueryApplicationLinksResponse>(),
        interceptors: self.interceptors?.makeApplicationLinksInterceptors() ?? [],
        userFunction: self.applicationLinks(request:context:)
      )

    case "ApplicationLinkByClientID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Profiles_V3_QueryApplicationLinkByClientIDRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Profiles_V3_QueryApplicationLinkByClientIDResponse>(),
        interceptors: self.interceptors?.makeApplicationLinkByClientIDInterceptors() ?? [],
        userFunction: self.applicationLinkByClientID(request:context:)
      )

    case "ApplicationLinkOwners":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Profiles_V3_QueryApplicationLinkOwnersRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Profiles_V3_QueryApplicationLinkOwnersResponse>(),
        interceptors: self.interceptors?.makeApplicationLinkOwnersInterceptors() ?? [],
        userFunction: self.applicationLinkOwners(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Profiles_V3_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Profiles_V3_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Desmos_Profiles_V3_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'profile'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProfileInterceptors() -> [ServerInterceptor<Desmos_Profiles_V3_QueryProfileRequest, Desmos_Profiles_V3_QueryProfileResponse>]

  /// - Returns: Interceptors to use when handling 'incomingDTagTransferRequests'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIncomingDTagTransferRequestsInterceptors() -> [ServerInterceptor<Desmos_Profiles_V3_QueryIncomingDTagTransferRequestsRequest, Desmos_Profiles_V3_QueryIncomingDTagTransferRequestsResponse>]

  /// - Returns: Interceptors to use when handling 'chainLinks'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeChainLinksInterceptors() -> [ServerInterceptor<Desmos_Profiles_V3_QueryChainLinksRequest, Desmos_Profiles_V3_QueryChainLinksResponse>]

  /// - Returns: Interceptors to use when handling 'chainLinkOwners'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeChainLinkOwnersInterceptors() -> [ServerInterceptor<Desmos_Profiles_V3_QueryChainLinkOwnersRequest, Desmos_Profiles_V3_QueryChainLinkOwnersResponse>]

  /// - Returns: Interceptors to use when handling 'defaultExternalAddresses'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDefaultExternalAddressesInterceptors() -> [ServerInterceptor<Desmos_Profiles_V3_QueryDefaultExternalAddressesRequest, Desmos_Profiles_V3_QueryDefaultExternalAddressesResponse>]

  /// - Returns: Interceptors to use when handling 'applicationLinks'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeApplicationLinksInterceptors() -> [ServerInterceptor<Desmos_Profiles_V3_QueryApplicationLinksRequest, Desmos_Profiles_V3_QueryApplicationLinksResponse>]

  /// - Returns: Interceptors to use when handling 'applicationLinkByClientID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeApplicationLinkByClientIDInterceptors() -> [ServerInterceptor<Desmos_Profiles_V3_QueryApplicationLinkByClientIDRequest, Desmos_Profiles_V3_QueryApplicationLinkByClientIDResponse>]

  /// - Returns: Interceptors to use when handling 'applicationLinkOwners'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeApplicationLinkOwnersInterceptors() -> [ServerInterceptor<Desmos_Profiles_V3_QueryApplicationLinkOwnersRequest, Desmos_Profiles_V3_QueryApplicationLinkOwnersResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Desmos_Profiles_V3_QueryParamsRequest, Desmos_Profiles_V3_QueryParamsResponse>]
}
