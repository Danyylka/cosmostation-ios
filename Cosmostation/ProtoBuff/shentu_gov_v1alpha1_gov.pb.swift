// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: shentu/gov/v1alpha1/gov.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ProposalStatus enumerates the valid statuses of a proposal.
enum Shentu_Gov_V1alpha1_ProposalStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
  case unspecified // = 0

  /// PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
  /// period.
  case depositPeriod // = 1

  /// PROPOSAL_STATUS_VOTING_PERIOD defines a certifier voting period status.
  case certifierVotingPeriod // = 2

  /// PROPOSAL_STATUS_VOTING_PERIOD defines a validator voting period status.
  case validatorVotingPeriod // = 3

  /// PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
  /// passed.
  case passed // = 4

  /// PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
  /// been rejected.
  case rejected // = 5

  /// PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
  /// failed.
  case failed // = 6
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .depositPeriod
    case 2: self = .certifierVotingPeriod
    case 3: self = .validatorVotingPeriod
    case 4: self = .passed
    case 5: self = .rejected
    case 6: self = .failed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .depositPeriod: return 1
    case .certifierVotingPeriod: return 2
    case .validatorVotingPeriod: return 3
    case .passed: return 4
    case .rejected: return 5
    case .failed: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Shentu_Gov_V1alpha1_ProposalStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Shentu_Gov_V1alpha1_ProposalStatus] = [
    .unspecified,
    .depositPeriod,
    .certifierVotingPeriod,
    .validatorVotingPeriod,
    .passed,
    .rejected,
    .failed,
  ]
}

#endif  // swift(>=4.2)

/// GenesisState defines the gov module's genesis state.
struct Shentu_Gov_V1alpha1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// starting_proposal_id is the ID of the starting proposal.
  var startingProposalID: UInt64 = 0

  /// deposits defines all the deposits present at genesis.
  var deposits: [Shentu_Gov_V1alpha1_Deposit] = []

  /// votes defines all the votes present at genesis.
  var votes: [Shentu_Gov_V1alpha1_Vote] = []

  /// proposals defines all the proposals present at genesis.
  var proposals: [Shentu_Gov_V1alpha1_Proposal] = []

  /// params defines all the paramaters of related to deposit.
  var depositParams: Shentu_Gov_V1alpha1_DepositParams {
    get {return _depositParams ?? Shentu_Gov_V1alpha1_DepositParams()}
    set {_depositParams = newValue}
  }
  /// Returns true if `depositParams` has been explicitly set.
  var hasDepositParams: Bool {return self._depositParams != nil}
  /// Clears the value of `depositParams`. Subsequent reads from it will return its default value.
  mutating func clearDepositParams() {self._depositParams = nil}

  /// params defines all the paramaters of related to voting.
  var votingParams: Cosmos_Gov_V1beta1_VotingParams {
    get {return _votingParams ?? Cosmos_Gov_V1beta1_VotingParams()}
    set {_votingParams = newValue}
  }
  /// Returns true if `votingParams` has been explicitly set.
  var hasVotingParams: Bool {return self._votingParams != nil}
  /// Clears the value of `votingParams`. Subsequent reads from it will return its default value.
  mutating func clearVotingParams() {self._votingParams = nil}

  /// params defines all the paramaters of related to tally.
  var tallyParams: Shentu_Gov_V1alpha1_TallyParams {
    get {return _tallyParams ?? Shentu_Gov_V1alpha1_TallyParams()}
    set {_tallyParams = newValue}
  }
  /// Returns true if `tallyParams` has been explicitly set.
  var hasTallyParams: Bool {return self._tallyParams != nil}
  /// Clears the value of `tallyParams`. Subsequent reads from it will return its default value.
  mutating func clearTallyParams() {self._tallyParams = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _depositParams: Shentu_Gov_V1alpha1_DepositParams? = nil
  fileprivate var _votingParams: Cosmos_Gov_V1beta1_VotingParams? = nil
  fileprivate var _tallyParams: Shentu_Gov_V1alpha1_TallyParams? = nil
}

/// Deposit defines an amount deposited by an account address to an active
/// proposal.
struct Shentu_Gov_V1alpha1_Deposit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var deposit: Cosmos_Gov_V1beta1_Deposit {
    get {return _deposit ?? Cosmos_Gov_V1beta1_Deposit()}
    set {_deposit = newValue}
  }
  /// Returns true if `deposit` has been explicitly set.
  var hasDeposit: Bool {return self._deposit != nil}
  /// Clears the value of `deposit`. Subsequent reads from it will return its default value.
  mutating func clearDeposit() {self._deposit = nil}

  var txHash: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _deposit: Cosmos_Gov_V1beta1_Deposit? = nil
}

/// DepositParams defines the params for deposits on governance proposals.
struct Shentu_Gov_V1alpha1_DepositParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///  Minimum deposit for a proposal to enter voting period.
  var minInitialDeposit: [Cosmos_Base_V1beta1_Coin] = []

  /// Minimum deposit for a proposal to enter voting period.
  var minDeposit: [Cosmos_Base_V1beta1_Coin] = []

  ///  Maximum period for CTK holders to deposit on a proposal. Initial value: 2
  ///  months.
  var maxDepositPeriod: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _maxDepositPeriod ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_maxDepositPeriod = newValue}
  }
  /// Returns true if `maxDepositPeriod` has been explicitly set.
  var hasMaxDepositPeriod: Bool {return self._maxDepositPeriod != nil}
  /// Clears the value of `maxDepositPeriod`. Subsequent reads from it will return its default value.
  mutating func clearMaxDepositPeriod() {self._maxDepositPeriod = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _maxDepositPeriod: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

/// TallyParams defines the params for tallying votes on governance proposals.
struct Shentu_Gov_V1alpha1_TallyParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var defaultTally: Cosmos_Gov_V1beta1_TallyParams {
    get {return _defaultTally ?? Cosmos_Gov_V1beta1_TallyParams()}
    set {_defaultTally = newValue}
  }
  /// Returns true if `defaultTally` has been explicitly set.
  var hasDefaultTally: Bool {return self._defaultTally != nil}
  /// Clears the value of `defaultTally`. Subsequent reads from it will return its default value.
  mutating func clearDefaultTally() {self._defaultTally = nil}

  var certifierUpdateSecurityVoteTally: Cosmos_Gov_V1beta1_TallyParams {
    get {return _certifierUpdateSecurityVoteTally ?? Cosmos_Gov_V1beta1_TallyParams()}
    set {_certifierUpdateSecurityVoteTally = newValue}
  }
  /// Returns true if `certifierUpdateSecurityVoteTally` has been explicitly set.
  var hasCertifierUpdateSecurityVoteTally: Bool {return self._certifierUpdateSecurityVoteTally != nil}
  /// Clears the value of `certifierUpdateSecurityVoteTally`. Subsequent reads from it will return its default value.
  mutating func clearCertifierUpdateSecurityVoteTally() {self._certifierUpdateSecurityVoteTally = nil}

  var certifierUpdateStakeVoteTally: Cosmos_Gov_V1beta1_TallyParams {
    get {return _certifierUpdateStakeVoteTally ?? Cosmos_Gov_V1beta1_TallyParams()}
    set {_certifierUpdateStakeVoteTally = newValue}
  }
  /// Returns true if `certifierUpdateStakeVoteTally` has been explicitly set.
  var hasCertifierUpdateStakeVoteTally: Bool {return self._certifierUpdateStakeVoteTally != nil}
  /// Clears the value of `certifierUpdateStakeVoteTally`. Subsequent reads from it will return its default value.
  mutating func clearCertifierUpdateStakeVoteTally() {self._certifierUpdateStakeVoteTally = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _defaultTally: Cosmos_Gov_V1beta1_TallyParams? = nil
  fileprivate var _certifierUpdateSecurityVoteTally: Cosmos_Gov_V1beta1_TallyParams? = nil
  fileprivate var _certifierUpdateStakeVoteTally: Cosmos_Gov_V1beta1_TallyParams? = nil
}

struct Shentu_Gov_V1alpha1_Proposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var content: Google_Protobuf2_Any {
    get {return _content ?? Google_Protobuf2_Any()}
    set {_content = newValue}
  }
  /// Returns true if `content` has been explicitly set.
  var hasContent: Bool {return self._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  mutating func clearContent() {self._content = nil}

  var proposalID: UInt64 = 0

  var status: Shentu_Gov_V1alpha1_ProposalStatus = .unspecified

  var isProposerCouncilMember: Bool = false

  var proposerAddress: String = String()

  var finalTallyResult: Cosmos_Gov_V1beta1_TallyResult {
    get {return _finalTallyResult ?? Cosmos_Gov_V1beta1_TallyResult()}
    set {_finalTallyResult = newValue}
  }
  /// Returns true if `finalTallyResult` has been explicitly set.
  var hasFinalTallyResult: Bool {return self._finalTallyResult != nil}
  /// Clears the value of `finalTallyResult`. Subsequent reads from it will return its default value.
  mutating func clearFinalTallyResult() {self._finalTallyResult = nil}

  var submitTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _submitTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_submitTime = newValue}
  }
  /// Returns true if `submitTime` has been explicitly set.
  var hasSubmitTime: Bool {return self._submitTime != nil}
  /// Clears the value of `submitTime`. Subsequent reads from it will return its default value.
  mutating func clearSubmitTime() {self._submitTime = nil}

  var depositEndTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _depositEndTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_depositEndTime = newValue}
  }
  /// Returns true if `depositEndTime` has been explicitly set.
  var hasDepositEndTime: Bool {return self._depositEndTime != nil}
  /// Clears the value of `depositEndTime`. Subsequent reads from it will return its default value.
  mutating func clearDepositEndTime() {self._depositEndTime = nil}

  var totalDeposit: [Cosmos_Base_V1beta1_Coin] = []

  var votingStartTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _votingStartTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_votingStartTime = newValue}
  }
  /// Returns true if `votingStartTime` has been explicitly set.
  var hasVotingStartTime: Bool {return self._votingStartTime != nil}
  /// Clears the value of `votingStartTime`. Subsequent reads from it will return its default value.
  mutating func clearVotingStartTime() {self._votingStartTime = nil}

  var votingEndTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _votingEndTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_votingEndTime = newValue}
  }
  /// Returns true if `votingEndTime` has been explicitly set.
  var hasVotingEndTime: Bool {return self._votingEndTime != nil}
  /// Clears the value of `votingEndTime`. Subsequent reads from it will return its default value.
  mutating func clearVotingEndTime() {self._votingEndTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _content: Google_Protobuf2_Any? = nil
  fileprivate var _finalTallyResult: Cosmos_Gov_V1beta1_TallyResult? = nil
  fileprivate var _submitTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _depositEndTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _votingStartTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _votingEndTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Vote defines a vote on a governance proposal.
/// A Vote consists of a proposal ID, the voter, and the vote option.
struct Shentu_Gov_V1alpha1_Vote {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var deposit: Cosmos_Gov_V1beta1_Vote {
    get {return _deposit ?? Cosmos_Gov_V1beta1_Vote()}
    set {_deposit = newValue}
  }
  /// Returns true if `deposit` has been explicitly set.
  var hasDeposit: Bool {return self._deposit != nil}
  /// Clears the value of `deposit`. Subsequent reads from it will return its default value.
  mutating func clearDeposit() {self._deposit = nil}

  var txHash: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _deposit: Cosmos_Gov_V1beta1_Vote? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "shentu.gov.v1alpha1"

extension Shentu_Gov_V1alpha1_ProposalStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PROPOSAL_STATUS_UNSPECIFIED"),
    1: .same(proto: "PROPOSAL_STATUS_DEPOSIT_PERIOD"),
    2: .same(proto: "PROPOSAL_STATUS_CERTIFIER_VOTING_PERIOD"),
    3: .same(proto: "PROPOSAL_STATUS_VALIDATOR_VOTING_PERIOD"),
    4: .same(proto: "PROPOSAL_STATUS_PASSED"),
    5: .same(proto: "PROPOSAL_STATUS_REJECTED"),
    6: .same(proto: "PROPOSAL_STATUS_FAILED"),
  ]
}

extension Shentu_Gov_V1alpha1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "starting_proposal_id"),
    2: .same(proto: "deposits"),
    3: .same(proto: "votes"),
    4: .same(proto: "proposals"),
    5: .standard(proto: "deposit_params"),
    6: .standard(proto: "voting_params"),
    7: .standard(proto: "tally_params"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.startingProposalID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.deposits)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.votes)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.proposals)
      case 5: try decoder.decodeSingularMessageField(value: &self._depositParams)
      case 6: try decoder.decodeSingularMessageField(value: &self._votingParams)
      case 7: try decoder.decodeSingularMessageField(value: &self._tallyParams)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.startingProposalID != 0 {
      try visitor.visitSingularUInt64Field(value: self.startingProposalID, fieldNumber: 1)
    }
    if !self.deposits.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.deposits, fieldNumber: 2)
    }
    if !self.votes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.votes, fieldNumber: 3)
    }
    if !self.proposals.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.proposals, fieldNumber: 4)
    }
    if let v = self._depositParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._votingParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._tallyParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Shentu_Gov_V1alpha1_GenesisState, rhs: Shentu_Gov_V1alpha1_GenesisState) -> Bool {
    if lhs.startingProposalID != rhs.startingProposalID {return false}
    if lhs.deposits != rhs.deposits {return false}
    if lhs.votes != rhs.votes {return false}
    if lhs.proposals != rhs.proposals {return false}
    if lhs._depositParams != rhs._depositParams {return false}
    if lhs._votingParams != rhs._votingParams {return false}
    if lhs._tallyParams != rhs._tallyParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Shentu_Gov_V1alpha1_Deposit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Deposit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "deposit"),
    2: .standard(proto: "tx_hash"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._deposit)
      case 2: try decoder.decodeSingularStringField(value: &self.txHash)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._deposit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.txHash.isEmpty {
      try visitor.visitSingularStringField(value: self.txHash, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Shentu_Gov_V1alpha1_Deposit, rhs: Shentu_Gov_V1alpha1_Deposit) -> Bool {
    if lhs._deposit != rhs._deposit {return false}
    if lhs.txHash != rhs.txHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Shentu_Gov_V1alpha1_DepositParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DepositParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "min_initial_deposit"),
    2: .standard(proto: "min_deposit"),
    3: .standard(proto: "max_deposit_period"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.minInitialDeposit)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.minDeposit)
      case 3: try decoder.decodeSingularMessageField(value: &self._maxDepositPeriod)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.minInitialDeposit.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.minInitialDeposit, fieldNumber: 1)
    }
    if !self.minDeposit.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.minDeposit, fieldNumber: 2)
    }
    if let v = self._maxDepositPeriod {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Shentu_Gov_V1alpha1_DepositParams, rhs: Shentu_Gov_V1alpha1_DepositParams) -> Bool {
    if lhs.minInitialDeposit != rhs.minInitialDeposit {return false}
    if lhs.minDeposit != rhs.minDeposit {return false}
    if lhs._maxDepositPeriod != rhs._maxDepositPeriod {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Shentu_Gov_V1alpha1_TallyParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TallyParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "default_tally"),
    2: .standard(proto: "certifier_update_security_vote_tally"),
    3: .standard(proto: "certifier_update_stake_vote_tally"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._defaultTally)
      case 2: try decoder.decodeSingularMessageField(value: &self._certifierUpdateSecurityVoteTally)
      case 3: try decoder.decodeSingularMessageField(value: &self._certifierUpdateStakeVoteTally)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._defaultTally {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._certifierUpdateSecurityVoteTally {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._certifierUpdateStakeVoteTally {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Shentu_Gov_V1alpha1_TallyParams, rhs: Shentu_Gov_V1alpha1_TallyParams) -> Bool {
    if lhs._defaultTally != rhs._defaultTally {return false}
    if lhs._certifierUpdateSecurityVoteTally != rhs._certifierUpdateSecurityVoteTally {return false}
    if lhs._certifierUpdateStakeVoteTally != rhs._certifierUpdateStakeVoteTally {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Shentu_Gov_V1alpha1_Proposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Proposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "content"),
    2: .standard(proto: "proposal_id"),
    3: .same(proto: "status"),
    4: .standard(proto: "is_proposer_council_member"),
    5: .standard(proto: "proposer_address"),
    6: .standard(proto: "final_tally_result"),
    7: .standard(proto: "submit_time"),
    8: .standard(proto: "deposit_end_time"),
    9: .standard(proto: "total_deposit"),
    10: .standard(proto: "voting_start_time"),
    11: .standard(proto: "voting_end_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._content)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.proposalID)
      case 3: try decoder.decodeSingularEnumField(value: &self.status)
      case 4: try decoder.decodeSingularBoolField(value: &self.isProposerCouncilMember)
      case 5: try decoder.decodeSingularStringField(value: &self.proposerAddress)
      case 6: try decoder.decodeSingularMessageField(value: &self._finalTallyResult)
      case 7: try decoder.decodeSingularMessageField(value: &self._submitTime)
      case 8: try decoder.decodeSingularMessageField(value: &self._depositEndTime)
      case 9: try decoder.decodeRepeatedMessageField(value: &self.totalDeposit)
      case 10: try decoder.decodeSingularMessageField(value: &self._votingStartTime)
      case 11: try decoder.decodeSingularMessageField(value: &self._votingEndTime)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._content {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.proposalID != 0 {
      try visitor.visitSingularUInt64Field(value: self.proposalID, fieldNumber: 2)
    }
    if self.status != .unspecified {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 3)
    }
    if self.isProposerCouncilMember != false {
      try visitor.visitSingularBoolField(value: self.isProposerCouncilMember, fieldNumber: 4)
    }
    if !self.proposerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.proposerAddress, fieldNumber: 5)
    }
    if let v = self._finalTallyResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._submitTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._depositEndTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if !self.totalDeposit.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.totalDeposit, fieldNumber: 9)
    }
    if let v = self._votingStartTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    if let v = self._votingEndTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Shentu_Gov_V1alpha1_Proposal, rhs: Shentu_Gov_V1alpha1_Proposal) -> Bool {
    if lhs._content != rhs._content {return false}
    if lhs.proposalID != rhs.proposalID {return false}
    if lhs.status != rhs.status {return false}
    if lhs.isProposerCouncilMember != rhs.isProposerCouncilMember {return false}
    if lhs.proposerAddress != rhs.proposerAddress {return false}
    if lhs._finalTallyResult != rhs._finalTallyResult {return false}
    if lhs._submitTime != rhs._submitTime {return false}
    if lhs._depositEndTime != rhs._depositEndTime {return false}
    if lhs.totalDeposit != rhs.totalDeposit {return false}
    if lhs._votingStartTime != rhs._votingStartTime {return false}
    if lhs._votingEndTime != rhs._votingEndTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Shentu_Gov_V1alpha1_Vote: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Vote"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "deposit"),
    2: .standard(proto: "tx_hash"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._deposit)
      case 2: try decoder.decodeSingularStringField(value: &self.txHash)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._deposit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.txHash.isEmpty {
      try visitor.visitSingularStringField(value: self.txHash, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Shentu_Gov_V1alpha1_Vote, rhs: Shentu_Gov_V1alpha1_Vote) -> Bool {
    if lhs._deposit != rhs._deposit {return false}
    if lhs.txHash != rhs.txHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
