// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: gravity/v1/attestation.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Gravity_V1_ClaimType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case deposit // = 1
  case withdraw // = 2
  case erc20Deployed // = 3
  case logicCallExecuted // = 4
  case valsetUpdated // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .deposit
    case 2: self = .withdraw
    case 3: self = .erc20Deployed
    case 4: self = .logicCallExecuted
    case 5: self = .valsetUpdated
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .deposit: return 1
    case .withdraw: return 2
    case .erc20Deployed: return 3
    case .logicCallExecuted: return 4
    case .valsetUpdated: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Gravity_V1_ClaimType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Gravity_V1_ClaimType] = [
    .unspecified,
    .deposit,
    .withdraw,
    .erc20Deployed,
    .logicCallExecuted,
    .valsetUpdated,
  ]
}

#endif  // swift(>=4.2)

/// Attestation is an aggregate of `claims` that eventually becomes `observed` by
/// all orchestrators
struct Gravity_V1_Attestation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// This field stores whether the Attestation has had its event applied to the Cosmos state. This happens when
  /// enough (usually >2/3s) of the validator power votes that they saw the event on Ethereum.
  /// For example, once a DepositClaim has modified the token balance of the account that it was deposited to,
  /// this boolean will be set to true.
  var observed: Bool = false

  /// This is an array of the addresses of the validators which have voted that they saw the event on Ethereum.
  var votes: [String] = []

  /// This is the Cosmos block height that this event was first observed by a validator.
  var height: UInt64 = 0

  /// The claim is the Ethereum event that this attestation is recording votes for.
  var claim: Google_Protobuf2_Any {
    get {return _claim ?? Google_Protobuf2_Any()}
    set {_claim = newValue}
  }
  /// Returns true if `claim` has been explicitly set.
  var hasClaim: Bool {return self._claim != nil}
  /// Clears the value of `claim`. Subsequent reads from it will return its default value.
  mutating func clearClaim() {self._claim = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _claim: Google_Protobuf2_Any? = nil
}

/// ERC20Token unique identifier for an Ethereum ERC20 token.
/// CONTRACT:
/// The contract address on ETH of the token, this could be a Cosmos
/// originated token, if so it will be the ERC20 address of the representation
/// (note: developers should look up the token symbol using the address on ETH to display for UI)
struct Gravity_V1_ERC20Token {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var contract: String = String()

  var amount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "gravity.v1"

extension Gravity_V1_ClaimType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CLAIM_TYPE_UNSPECIFIED"),
    1: .same(proto: "CLAIM_TYPE_DEPOSIT"),
    2: .same(proto: "CLAIM_TYPE_WITHDRAW"),
    3: .same(proto: "CLAIM_TYPE_ERC20_DEPLOYED"),
    4: .same(proto: "CLAIM_TYPE_LOGIC_CALL_EXECUTED"),
    5: .same(proto: "CLAIM_TYPE_VALSET_UPDATED"),
  ]
}

extension Gravity_V1_Attestation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Attestation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "observed"),
    2: .same(proto: "votes"),
    3: .same(proto: "height"),
    4: .same(proto: "claim"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.observed)
      case 2: try decoder.decodeRepeatedStringField(value: &self.votes)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.height)
      case 4: try decoder.decodeSingularMessageField(value: &self._claim)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.observed != false {
      try visitor.visitSingularBoolField(value: self.observed, fieldNumber: 1)
    }
    if !self.votes.isEmpty {
      try visitor.visitRepeatedStringField(value: self.votes, fieldNumber: 2)
    }
    if self.height != 0 {
      try visitor.visitSingularUInt64Field(value: self.height, fieldNumber: 3)
    }
    if let v = self._claim {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gravity_V1_Attestation, rhs: Gravity_V1_Attestation) -> Bool {
    if lhs.observed != rhs.observed {return false}
    if lhs.votes != rhs.votes {return false}
    if lhs.height != rhs.height {return false}
    if lhs._claim != rhs._claim {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gravity_V1_ERC20Token: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ERC20Token"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contract"),
    2: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contract)
      case 2: try decoder.decodeSingularStringField(value: &self.amount)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contract.isEmpty {
      try visitor.visitSingularStringField(value: self.contract, fieldNumber: 1)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gravity_V1_ERC20Token, rhs: Gravity_V1_ERC20Token) -> Bool {
    if lhs.contract != rhs.contract {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
