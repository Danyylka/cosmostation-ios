//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: desmos/profiles/v3/msg_server.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg defines the relationships Msg service.
///
/// Usage: instantiate `Desmos_Profiles_V3_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Desmos_Profiles_V3_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Desmos_Profiles_V3_MsgClientInterceptorFactoryProtocol? { get }

  func saveProfile(
    _ request: Desmos_Profiles_V3_MsgSaveProfile,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Profiles_V3_MsgSaveProfile, Desmos_Profiles_V3_MsgSaveProfileResponse>

  func deleteProfile(
    _ request: Desmos_Profiles_V3_MsgDeleteProfile,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Profiles_V3_MsgDeleteProfile, Desmos_Profiles_V3_MsgDeleteProfileResponse>

  func requestDTagTransfer(
    _ request: Desmos_Profiles_V3_MsgRequestDTagTransfer,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Profiles_V3_MsgRequestDTagTransfer, Desmos_Profiles_V3_MsgRequestDTagTransferResponse>

  func cancelDTagTransferRequest(
    _ request: Desmos_Profiles_V3_MsgCancelDTagTransferRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Profiles_V3_MsgCancelDTagTransferRequest, Desmos_Profiles_V3_MsgCancelDTagTransferRequestResponse>

  func acceptDTagTransferRequest(
    _ request: Desmos_Profiles_V3_MsgAcceptDTagTransferRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Profiles_V3_MsgAcceptDTagTransferRequest, Desmos_Profiles_V3_MsgAcceptDTagTransferRequestResponse>

  func refuseDTagTransferRequest(
    _ request: Desmos_Profiles_V3_MsgRefuseDTagTransferRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Profiles_V3_MsgRefuseDTagTransferRequest, Desmos_Profiles_V3_MsgRefuseDTagTransferRequestResponse>

  func linkChainAccount(
    _ request: Desmos_Profiles_V3_MsgLinkChainAccount,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Profiles_V3_MsgLinkChainAccount, Desmos_Profiles_V3_MsgLinkChainAccountResponse>

  func unlinkChainAccount(
    _ request: Desmos_Profiles_V3_MsgUnlinkChainAccount,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Profiles_V3_MsgUnlinkChainAccount, Desmos_Profiles_V3_MsgUnlinkChainAccountResponse>

  func setDefaultExternalAddress(
    _ request: Desmos_Profiles_V3_MsgSetDefaultExternalAddress,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Profiles_V3_MsgSetDefaultExternalAddress, Desmos_Profiles_V3_MsgSetDefaultExternalAddressResponse>

  func linkApplication(
    _ request: Desmos_Profiles_V3_MsgLinkApplication,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Profiles_V3_MsgLinkApplication, Desmos_Profiles_V3_MsgLinkApplicationResponse>

  func unlinkApplication(
    _ request: Desmos_Profiles_V3_MsgUnlinkApplication,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Profiles_V3_MsgUnlinkApplication, Desmos_Profiles_V3_MsgUnlinkApplicationResponse>
}

extension Desmos_Profiles_V3_MsgClientProtocol {
  internal var serviceName: String {
    return "desmos.profiles.v3.Msg"
  }

  /// SaveProfile defines the method to save a profile
  ///
  /// - Parameters:
  ///   - request: Request to send to SaveProfile.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func saveProfile(
    _ request: Desmos_Profiles_V3_MsgSaveProfile,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Profiles_V3_MsgSaveProfile, Desmos_Profiles_V3_MsgSaveProfileResponse> {
    return self.makeUnaryCall(
      path: "/desmos.profiles.v3.Msg/SaveProfile",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSaveProfileInterceptors() ?? []
    )
  }

  /// DeleteProfile defines the method to delete an existing profile
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteProfile.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteProfile(
    _ request: Desmos_Profiles_V3_MsgDeleteProfile,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Profiles_V3_MsgDeleteProfile, Desmos_Profiles_V3_MsgDeleteProfileResponse> {
    return self.makeUnaryCall(
      path: "/desmos.profiles.v3.Msg/DeleteProfile",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteProfileInterceptors() ?? []
    )
  }

  /// RequestDTagTransfer defines the method to request another user to transfer
  /// their DTag to you
  ///
  /// - Parameters:
  ///   - request: Request to send to RequestDTagTransfer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func requestDTagTransfer(
    _ request: Desmos_Profiles_V3_MsgRequestDTagTransfer,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Profiles_V3_MsgRequestDTagTransfer, Desmos_Profiles_V3_MsgRequestDTagTransferResponse> {
    return self.makeUnaryCall(
      path: "/desmos.profiles.v3.Msg/RequestDTagTransfer",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestDTagTransferInterceptors() ?? []
    )
  }

  /// CancelDTagTransferRequest defines the method to cancel an outgoing DTag
  /// transfer request
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelDTagTransferRequest.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancelDTagTransferRequest(
    _ request: Desmos_Profiles_V3_MsgCancelDTagTransferRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Profiles_V3_MsgCancelDTagTransferRequest, Desmos_Profiles_V3_MsgCancelDTagTransferRequestResponse> {
    return self.makeUnaryCall(
      path: "/desmos.profiles.v3.Msg/CancelDTagTransferRequest",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelDTagTransferRequestInterceptors() ?? []
    )
  }

  /// AcceptDTagTransferRequest defines the method to accept an incoming DTag
  /// transfer request
  ///
  /// - Parameters:
  ///   - request: Request to send to AcceptDTagTransferRequest.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func acceptDTagTransferRequest(
    _ request: Desmos_Profiles_V3_MsgAcceptDTagTransferRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Profiles_V3_MsgAcceptDTagTransferRequest, Desmos_Profiles_V3_MsgAcceptDTagTransferRequestResponse> {
    return self.makeUnaryCall(
      path: "/desmos.profiles.v3.Msg/AcceptDTagTransferRequest",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAcceptDTagTransferRequestInterceptors() ?? []
    )
  }

  /// RefuseDTagTransferRequest defines the method to refuse an incoming DTag
  /// transfer request
  ///
  /// - Parameters:
  ///   - request: Request to send to RefuseDTagTransferRequest.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func refuseDTagTransferRequest(
    _ request: Desmos_Profiles_V3_MsgRefuseDTagTransferRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Profiles_V3_MsgRefuseDTagTransferRequest, Desmos_Profiles_V3_MsgRefuseDTagTransferRequestResponse> {
    return self.makeUnaryCall(
      path: "/desmos.profiles.v3.Msg/RefuseDTagTransferRequest",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRefuseDTagTransferRequestInterceptors() ?? []
    )
  }

  /// LinkChainAccount defines a method to link an external chain account to a
  /// profile
  ///
  /// - Parameters:
  ///   - request: Request to send to LinkChainAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func linkChainAccount(
    _ request: Desmos_Profiles_V3_MsgLinkChainAccount,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Profiles_V3_MsgLinkChainAccount, Desmos_Profiles_V3_MsgLinkChainAccountResponse> {
    return self.makeUnaryCall(
      path: "/desmos.profiles.v3.Msg/LinkChainAccount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkChainAccountInterceptors() ?? []
    )
  }

  /// UnlinkChainAccount defines a method to unlink an external chain account
  /// from a profile
  ///
  /// - Parameters:
  ///   - request: Request to send to UnlinkChainAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unlinkChainAccount(
    _ request: Desmos_Profiles_V3_MsgUnlinkChainAccount,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Profiles_V3_MsgUnlinkChainAccount, Desmos_Profiles_V3_MsgUnlinkChainAccountResponse> {
    return self.makeUnaryCall(
      path: "/desmos.profiles.v3.Msg/UnlinkChainAccount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkChainAccountInterceptors() ?? []
    )
  }

  /// SetDefaultExternalAddress allows to set a specific external address as the
  /// default one for a given chain
  ///
  /// - Parameters:
  ///   - request: Request to send to SetDefaultExternalAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setDefaultExternalAddress(
    _ request: Desmos_Profiles_V3_MsgSetDefaultExternalAddress,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Profiles_V3_MsgSetDefaultExternalAddress, Desmos_Profiles_V3_MsgSetDefaultExternalAddressResponse> {
    return self.makeUnaryCall(
      path: "/desmos.profiles.v3.Msg/SetDefaultExternalAddress",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetDefaultExternalAddressInterceptors() ?? []
    )
  }

  /// LinkApplication defines a method to create a centralized application
  /// link
  ///
  /// - Parameters:
  ///   - request: Request to send to LinkApplication.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func linkApplication(
    _ request: Desmos_Profiles_V3_MsgLinkApplication,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Profiles_V3_MsgLinkApplication, Desmos_Profiles_V3_MsgLinkApplicationResponse> {
    return self.makeUnaryCall(
      path: "/desmos.profiles.v3.Msg/LinkApplication",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkApplicationInterceptors() ?? []
    )
  }

  /// UnlinkApplication defines a method to remove a centralized application
  ///
  /// - Parameters:
  ///   - request: Request to send to UnlinkApplication.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unlinkApplication(
    _ request: Desmos_Profiles_V3_MsgUnlinkApplication,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Profiles_V3_MsgUnlinkApplication, Desmos_Profiles_V3_MsgUnlinkApplicationResponse> {
    return self.makeUnaryCall(
      path: "/desmos.profiles.v3.Msg/UnlinkApplication",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlinkApplicationInterceptors() ?? []
    )
  }
}

internal protocol Desmos_Profiles_V3_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'saveProfile'.
  func makeSaveProfileInterceptors() -> [ClientInterceptor<Desmos_Profiles_V3_MsgSaveProfile, Desmos_Profiles_V3_MsgSaveProfileResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteProfile'.
  func makeDeleteProfileInterceptors() -> [ClientInterceptor<Desmos_Profiles_V3_MsgDeleteProfile, Desmos_Profiles_V3_MsgDeleteProfileResponse>]

  /// - Returns: Interceptors to use when invoking 'requestDTagTransfer'.
  func makeRequestDTagTransferInterceptors() -> [ClientInterceptor<Desmos_Profiles_V3_MsgRequestDTagTransfer, Desmos_Profiles_V3_MsgRequestDTagTransferResponse>]

  /// - Returns: Interceptors to use when invoking 'cancelDTagTransferRequest'.
  func makeCancelDTagTransferRequestInterceptors() -> [ClientInterceptor<Desmos_Profiles_V3_MsgCancelDTagTransferRequest, Desmos_Profiles_V3_MsgCancelDTagTransferRequestResponse>]

  /// - Returns: Interceptors to use when invoking 'acceptDTagTransferRequest'.
  func makeAcceptDTagTransferRequestInterceptors() -> [ClientInterceptor<Desmos_Profiles_V3_MsgAcceptDTagTransferRequest, Desmos_Profiles_V3_MsgAcceptDTagTransferRequestResponse>]

  /// - Returns: Interceptors to use when invoking 'refuseDTagTransferRequest'.
  func makeRefuseDTagTransferRequestInterceptors() -> [ClientInterceptor<Desmos_Profiles_V3_MsgRefuseDTagTransferRequest, Desmos_Profiles_V3_MsgRefuseDTagTransferRequestResponse>]

  /// - Returns: Interceptors to use when invoking 'linkChainAccount'.
  func makeLinkChainAccountInterceptors() -> [ClientInterceptor<Desmos_Profiles_V3_MsgLinkChainAccount, Desmos_Profiles_V3_MsgLinkChainAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'unlinkChainAccount'.
  func makeUnlinkChainAccountInterceptors() -> [ClientInterceptor<Desmos_Profiles_V3_MsgUnlinkChainAccount, Desmos_Profiles_V3_MsgUnlinkChainAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'setDefaultExternalAddress'.
  func makeSetDefaultExternalAddressInterceptors() -> [ClientInterceptor<Desmos_Profiles_V3_MsgSetDefaultExternalAddress, Desmos_Profiles_V3_MsgSetDefaultExternalAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'linkApplication'.
  func makeLinkApplicationInterceptors() -> [ClientInterceptor<Desmos_Profiles_V3_MsgLinkApplication, Desmos_Profiles_V3_MsgLinkApplicationResponse>]

  /// - Returns: Interceptors to use when invoking 'unlinkApplication'.
  func makeUnlinkApplicationInterceptors() -> [ClientInterceptor<Desmos_Profiles_V3_MsgUnlinkApplication, Desmos_Profiles_V3_MsgUnlinkApplicationResponse>]
}

internal final class Desmos_Profiles_V3_MsgClient: Desmos_Profiles_V3_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Desmos_Profiles_V3_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the desmos.profiles.v3.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Desmos_Profiles_V3_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the relationships Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Desmos_Profiles_V3_MsgProvider: CallHandlerProvider {
  var interceptors: Desmos_Profiles_V3_MsgServerInterceptorFactoryProtocol? { get }

  /// SaveProfile defines the method to save a profile
  func saveProfile(request: Desmos_Profiles_V3_MsgSaveProfile, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Profiles_V3_MsgSaveProfileResponse>

  /// DeleteProfile defines the method to delete an existing profile
  func deleteProfile(request: Desmos_Profiles_V3_MsgDeleteProfile, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Profiles_V3_MsgDeleteProfileResponse>

  /// RequestDTagTransfer defines the method to request another user to transfer
  /// their DTag to you
  func requestDTagTransfer(request: Desmos_Profiles_V3_MsgRequestDTagTransfer, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Profiles_V3_MsgRequestDTagTransferResponse>

  /// CancelDTagTransferRequest defines the method to cancel an outgoing DTag
  /// transfer request
  func cancelDTagTransferRequest(request: Desmos_Profiles_V3_MsgCancelDTagTransferRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Profiles_V3_MsgCancelDTagTransferRequestResponse>

  /// AcceptDTagTransferRequest defines the method to accept an incoming DTag
  /// transfer request
  func acceptDTagTransferRequest(request: Desmos_Profiles_V3_MsgAcceptDTagTransferRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Profiles_V3_MsgAcceptDTagTransferRequestResponse>

  /// RefuseDTagTransferRequest defines the method to refuse an incoming DTag
  /// transfer request
  func refuseDTagTransferRequest(request: Desmos_Profiles_V3_MsgRefuseDTagTransferRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Profiles_V3_MsgRefuseDTagTransferRequestResponse>

  /// LinkChainAccount defines a method to link an external chain account to a
  /// profile
  func linkChainAccount(request: Desmos_Profiles_V3_MsgLinkChainAccount, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Profiles_V3_MsgLinkChainAccountResponse>

  /// UnlinkChainAccount defines a method to unlink an external chain account
  /// from a profile
  func unlinkChainAccount(request: Desmos_Profiles_V3_MsgUnlinkChainAccount, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Profiles_V3_MsgUnlinkChainAccountResponse>

  /// SetDefaultExternalAddress allows to set a specific external address as the
  /// default one for a given chain
  func setDefaultExternalAddress(request: Desmos_Profiles_V3_MsgSetDefaultExternalAddress, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Profiles_V3_MsgSetDefaultExternalAddressResponse>

  /// LinkApplication defines a method to create a centralized application
  /// link
  func linkApplication(request: Desmos_Profiles_V3_MsgLinkApplication, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Profiles_V3_MsgLinkApplicationResponse>

  /// UnlinkApplication defines a method to remove a centralized application
  func unlinkApplication(request: Desmos_Profiles_V3_MsgUnlinkApplication, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Profiles_V3_MsgUnlinkApplicationResponse>
}

extension Desmos_Profiles_V3_MsgProvider {
  internal var serviceName: Substring { return "desmos.profiles.v3.Msg" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SaveProfile":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Profiles_V3_MsgSaveProfile>(),
        responseSerializer: ProtobufSerializer<Desmos_Profiles_V3_MsgSaveProfileResponse>(),
        interceptors: self.interceptors?.makeSaveProfileInterceptors() ?? [],
        userFunction: self.saveProfile(request:context:)
      )

    case "DeleteProfile":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Profiles_V3_MsgDeleteProfile>(),
        responseSerializer: ProtobufSerializer<Desmos_Profiles_V3_MsgDeleteProfileResponse>(),
        interceptors: self.interceptors?.makeDeleteProfileInterceptors() ?? [],
        userFunction: self.deleteProfile(request:context:)
      )

    case "RequestDTagTransfer":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Profiles_V3_MsgRequestDTagTransfer>(),
        responseSerializer: ProtobufSerializer<Desmos_Profiles_V3_MsgRequestDTagTransferResponse>(),
        interceptors: self.interceptors?.makeRequestDTagTransferInterceptors() ?? [],
        userFunction: self.requestDTagTransfer(request:context:)
      )

    case "CancelDTagTransferRequest":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Profiles_V3_MsgCancelDTagTransferRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Profiles_V3_MsgCancelDTagTransferRequestResponse>(),
        interceptors: self.interceptors?.makeCancelDTagTransferRequestInterceptors() ?? [],
        userFunction: self.cancelDTagTransferRequest(request:context:)
      )

    case "AcceptDTagTransferRequest":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Profiles_V3_MsgAcceptDTagTransferRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Profiles_V3_MsgAcceptDTagTransferRequestResponse>(),
        interceptors: self.interceptors?.makeAcceptDTagTransferRequestInterceptors() ?? [],
        userFunction: self.acceptDTagTransferRequest(request:context:)
      )

    case "RefuseDTagTransferRequest":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Profiles_V3_MsgRefuseDTagTransferRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Profiles_V3_MsgRefuseDTagTransferRequestResponse>(),
        interceptors: self.interceptors?.makeRefuseDTagTransferRequestInterceptors() ?? [],
        userFunction: self.refuseDTagTransferRequest(request:context:)
      )

    case "LinkChainAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Profiles_V3_MsgLinkChainAccount>(),
        responseSerializer: ProtobufSerializer<Desmos_Profiles_V3_MsgLinkChainAccountResponse>(),
        interceptors: self.interceptors?.makeLinkChainAccountInterceptors() ?? [],
        userFunction: self.linkChainAccount(request:context:)
      )

    case "UnlinkChainAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Profiles_V3_MsgUnlinkChainAccount>(),
        responseSerializer: ProtobufSerializer<Desmos_Profiles_V3_MsgUnlinkChainAccountResponse>(),
        interceptors: self.interceptors?.makeUnlinkChainAccountInterceptors() ?? [],
        userFunction: self.unlinkChainAccount(request:context:)
      )

    case "SetDefaultExternalAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Profiles_V3_MsgSetDefaultExternalAddress>(),
        responseSerializer: ProtobufSerializer<Desmos_Profiles_V3_MsgSetDefaultExternalAddressResponse>(),
        interceptors: self.interceptors?.makeSetDefaultExternalAddressInterceptors() ?? [],
        userFunction: self.setDefaultExternalAddress(request:context:)
      )

    case "LinkApplication":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Profiles_V3_MsgLinkApplication>(),
        responseSerializer: ProtobufSerializer<Desmos_Profiles_V3_MsgLinkApplicationResponse>(),
        interceptors: self.interceptors?.makeLinkApplicationInterceptors() ?? [],
        userFunction: self.linkApplication(request:context:)
      )

    case "UnlinkApplication":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Profiles_V3_MsgUnlinkApplication>(),
        responseSerializer: ProtobufSerializer<Desmos_Profiles_V3_MsgUnlinkApplicationResponse>(),
        interceptors: self.interceptors?.makeUnlinkApplicationInterceptors() ?? [],
        userFunction: self.unlinkApplication(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Desmos_Profiles_V3_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'saveProfile'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSaveProfileInterceptors() -> [ServerInterceptor<Desmos_Profiles_V3_MsgSaveProfile, Desmos_Profiles_V3_MsgSaveProfileResponse>]

  /// - Returns: Interceptors to use when handling 'deleteProfile'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteProfileInterceptors() -> [ServerInterceptor<Desmos_Profiles_V3_MsgDeleteProfile, Desmos_Profiles_V3_MsgDeleteProfileResponse>]

  /// - Returns: Interceptors to use when handling 'requestDTagTransfer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRequestDTagTransferInterceptors() -> [ServerInterceptor<Desmos_Profiles_V3_MsgRequestDTagTransfer, Desmos_Profiles_V3_MsgRequestDTagTransferResponse>]

  /// - Returns: Interceptors to use when handling 'cancelDTagTransferRequest'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelDTagTransferRequestInterceptors() -> [ServerInterceptor<Desmos_Profiles_V3_MsgCancelDTagTransferRequest, Desmos_Profiles_V3_MsgCancelDTagTransferRequestResponse>]

  /// - Returns: Interceptors to use when handling 'acceptDTagTransferRequest'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAcceptDTagTransferRequestInterceptors() -> [ServerInterceptor<Desmos_Profiles_V3_MsgAcceptDTagTransferRequest, Desmos_Profiles_V3_MsgAcceptDTagTransferRequestResponse>]

  /// - Returns: Interceptors to use when handling 'refuseDTagTransferRequest'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRefuseDTagTransferRequestInterceptors() -> [ServerInterceptor<Desmos_Profiles_V3_MsgRefuseDTagTransferRequest, Desmos_Profiles_V3_MsgRefuseDTagTransferRequestResponse>]

  /// - Returns: Interceptors to use when handling 'linkChainAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLinkChainAccountInterceptors() -> [ServerInterceptor<Desmos_Profiles_V3_MsgLinkChainAccount, Desmos_Profiles_V3_MsgLinkChainAccountResponse>]

  /// - Returns: Interceptors to use when handling 'unlinkChainAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnlinkChainAccountInterceptors() -> [ServerInterceptor<Desmos_Profiles_V3_MsgUnlinkChainAccount, Desmos_Profiles_V3_MsgUnlinkChainAccountResponse>]

  /// - Returns: Interceptors to use when handling 'setDefaultExternalAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetDefaultExternalAddressInterceptors() -> [ServerInterceptor<Desmos_Profiles_V3_MsgSetDefaultExternalAddress, Desmos_Profiles_V3_MsgSetDefaultExternalAddressResponse>]

  /// - Returns: Interceptors to use when handling 'linkApplication'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLinkApplicationInterceptors() -> [ServerInterceptor<Desmos_Profiles_V3_MsgLinkApplication, Desmos_Profiles_V3_MsgLinkApplicationResponse>]

  /// - Returns: Interceptors to use when handling 'unlinkApplication'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnlinkApplicationInterceptors() -> [ServerInterceptor<Desmos_Profiles_V3_MsgUnlinkApplication, Desmos_Profiles_V3_MsgUnlinkApplicationResponse>]
}
