//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: kava/evmutil/v1beta1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg defines the evmutil Msg service.
///
/// Usage: instantiate `Kava_Evmutil_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Kava_Evmutil_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Kava_Evmutil_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func convertCoinToERC20(
    _ request: Kava_Evmutil_V1beta1_MsgConvertCoinToERC20,
    callOptions: CallOptions?
  ) -> UnaryCall<Kava_Evmutil_V1beta1_MsgConvertCoinToERC20, Kava_Evmutil_V1beta1_MsgConvertCoinToERC20Response>

  func convertERC20ToCoin(
    _ request: Kava_Evmutil_V1beta1_MsgConvertERC20ToCoin,
    callOptions: CallOptions?
  ) -> UnaryCall<Kava_Evmutil_V1beta1_MsgConvertERC20ToCoin, Kava_Evmutil_V1beta1_MsgConvertERC20ToCoinResponse>
}

extension Kava_Evmutil_V1beta1_MsgClientProtocol {
  internal var serviceName: String {
    return "kava.evmutil.v1beta1.Msg"
  }

  /// ConvertCoinToERC20 defines a method for converting sdk.Coin to Kava ERC20.
  ///
  /// - Parameters:
  ///   - request: Request to send to ConvertCoinToERC20.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func convertCoinToERC20(
    _ request: Kava_Evmutil_V1beta1_MsgConvertCoinToERC20,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kava_Evmutil_V1beta1_MsgConvertCoinToERC20, Kava_Evmutil_V1beta1_MsgConvertCoinToERC20Response> {
    return self.makeUnaryCall(
      path: "/kava.evmutil.v1beta1.Msg/ConvertCoinToERC20",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConvertCoinToERC20Interceptors() ?? []
    )
  }

  /// ConvertERC20ToCoin defines a method for converting Kava ERC20 to sdk.Coin.
  ///
  /// - Parameters:
  ///   - request: Request to send to ConvertERC20ToCoin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func convertERC20ToCoin(
    _ request: Kava_Evmutil_V1beta1_MsgConvertERC20ToCoin,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kava_Evmutil_V1beta1_MsgConvertERC20ToCoin, Kava_Evmutil_V1beta1_MsgConvertERC20ToCoinResponse> {
    return self.makeUnaryCall(
      path: "/kava.evmutil.v1beta1.Msg/ConvertERC20ToCoin",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConvertERC20ToCoinInterceptors() ?? []
    )
  }
}

internal protocol Kava_Evmutil_V1beta1_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'convertCoinToERC20'.
  func makeConvertCoinToERC20Interceptors() -> [ClientInterceptor<Kava_Evmutil_V1beta1_MsgConvertCoinToERC20, Kava_Evmutil_V1beta1_MsgConvertCoinToERC20Response>]

  /// - Returns: Interceptors to use when invoking 'convertERC20ToCoin'.
  func makeConvertERC20ToCoinInterceptors() -> [ClientInterceptor<Kava_Evmutil_V1beta1_MsgConvertERC20ToCoin, Kava_Evmutil_V1beta1_MsgConvertERC20ToCoinResponse>]
}

internal final class Kava_Evmutil_V1beta1_MsgClient: Kava_Evmutil_V1beta1_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Kava_Evmutil_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the kava.evmutil.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kava_Evmutil_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the evmutil Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Kava_Evmutil_V1beta1_MsgProvider: CallHandlerProvider {
  var interceptors: Kava_Evmutil_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  /// ConvertCoinToERC20 defines a method for converting sdk.Coin to Kava ERC20.
  func convertCoinToERC20(request: Kava_Evmutil_V1beta1_MsgConvertCoinToERC20, context: StatusOnlyCallContext) -> EventLoopFuture<Kava_Evmutil_V1beta1_MsgConvertCoinToERC20Response>

  /// ConvertERC20ToCoin defines a method for converting Kava ERC20 to sdk.Coin.
  func convertERC20ToCoin(request: Kava_Evmutil_V1beta1_MsgConvertERC20ToCoin, context: StatusOnlyCallContext) -> EventLoopFuture<Kava_Evmutil_V1beta1_MsgConvertERC20ToCoinResponse>
}

extension Kava_Evmutil_V1beta1_MsgProvider {
  internal var serviceName: Substring { return "kava.evmutil.v1beta1.Msg" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ConvertCoinToERC20":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Evmutil_V1beta1_MsgConvertCoinToERC20>(),
        responseSerializer: ProtobufSerializer<Kava_Evmutil_V1beta1_MsgConvertCoinToERC20Response>(),
        interceptors: self.interceptors?.makeConvertCoinToERC20Interceptors() ?? [],
        userFunction: self.convertCoinToERC20(request:context:)
      )

    case "ConvertERC20ToCoin":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Evmutil_V1beta1_MsgConvertERC20ToCoin>(),
        responseSerializer: ProtobufSerializer<Kava_Evmutil_V1beta1_MsgConvertERC20ToCoinResponse>(),
        interceptors: self.interceptors?.makeConvertERC20ToCoinInterceptors() ?? [],
        userFunction: self.convertERC20ToCoin(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Kava_Evmutil_V1beta1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'convertCoinToERC20'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConvertCoinToERC20Interceptors() -> [ServerInterceptor<Kava_Evmutil_V1beta1_MsgConvertCoinToERC20, Kava_Evmutil_V1beta1_MsgConvertCoinToERC20Response>]

  /// - Returns: Interceptors to use when handling 'convertERC20ToCoin'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConvertERC20ToCoinInterceptors() -> [ServerInterceptor<Kava_Evmutil_V1beta1_MsgConvertERC20ToCoin, Kava_Evmutil_V1beta1_MsgConvertERC20ToCoinResponse>]
}
