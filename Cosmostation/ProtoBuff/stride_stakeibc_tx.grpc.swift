//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: stride/stakeibc/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg defines the Msg service.
///
/// Usage: instantiate `Stride_Stakeibc_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Stride_Stakeibc_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Stride_Stakeibc_MsgClientInterceptorFactoryProtocol? { get }

  func liquidStake(
    _ request: Stride_Stakeibc_MsgLiquidStake,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_MsgLiquidStake, Stride_Stakeibc_MsgLiquidStakeResponse>

  func redeemStake(
    _ request: Stride_Stakeibc_MsgRedeemStake,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_MsgRedeemStake, Stride_Stakeibc_MsgRedeemStakeResponse>

  func registerHostZone(
    _ request: Stride_Stakeibc_MsgRegisterHostZone,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_MsgRegisterHostZone, Stride_Stakeibc_MsgRegisterHostZoneResponse>

  func claimUndelegatedTokens(
    _ request: Stride_Stakeibc_MsgClaimUndelegatedTokens,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_MsgClaimUndelegatedTokens, Stride_Stakeibc_MsgClaimUndelegatedTokensResponse>

  func rebalanceValidators(
    _ request: Stride_Stakeibc_MsgRebalanceValidators,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_MsgRebalanceValidators, Stride_Stakeibc_MsgRebalanceValidatorsResponse>

  func addValidator(
    _ request: Stride_Stakeibc_MsgAddValidator,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_MsgAddValidator, Stride_Stakeibc_MsgAddValidatorResponse>

  func changeValidatorWeight(
    _ request: Stride_Stakeibc_MsgChangeValidatorWeight,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_MsgChangeValidatorWeight, Stride_Stakeibc_MsgChangeValidatorWeightResponse>

  func deleteValidator(
    _ request: Stride_Stakeibc_MsgDeleteValidator,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_MsgDeleteValidator, Stride_Stakeibc_MsgDeleteValidatorResponse>

  func restoreInterchainAccount(
    _ request: Stride_Stakeibc_MsgRestoreInterchainAccount,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_MsgRestoreInterchainAccount, Stride_Stakeibc_MsgRestoreInterchainAccountResponse>

  func updateValidatorSharesExchRate(
    _ request: Stride_Stakeibc_MsgUpdateValidatorSharesExchRate,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_MsgUpdateValidatorSharesExchRate, Stride_Stakeibc_MsgUpdateValidatorSharesExchRateResponse>

  func clearBalance(
    _ request: Stride_Stakeibc_MsgClearBalance,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_MsgClearBalance, Stride_Stakeibc_MsgClearBalanceResponse>

  func resetUnbondingRecordEpochNumbers(
    _ request: Stride_Stakeibc_MsgResetUnbondingRecordEpochNumbers,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_MsgResetUnbondingRecordEpochNumbers, Stride_Stakeibc_MsgResetUnbondingRecordEpochNumbersResponse>
}

extension Stride_Stakeibc_MsgClientProtocol {
  internal var serviceName: String {
    return "stride.stakeibc.Msg"
  }

  /// Unary call to LiquidStake
  ///
  /// - Parameters:
  ///   - request: Request to send to LiquidStake.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func liquidStake(
    _ request: Stride_Stakeibc_MsgLiquidStake,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_MsgLiquidStake, Stride_Stakeibc_MsgLiquidStakeResponse> {
    return self.makeUnaryCall(
      path: "/stride.stakeibc.Msg/LiquidStake",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLiquidStakeInterceptors() ?? []
    )
  }

  /// Unary call to RedeemStake
  ///
  /// - Parameters:
  ///   - request: Request to send to RedeemStake.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func redeemStake(
    _ request: Stride_Stakeibc_MsgRedeemStake,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_MsgRedeemStake, Stride_Stakeibc_MsgRedeemStakeResponse> {
    return self.makeUnaryCall(
      path: "/stride.stakeibc.Msg/RedeemStake",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRedeemStakeInterceptors() ?? []
    )
  }

  /// Unary call to RegisterHostZone
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterHostZone.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerHostZone(
    _ request: Stride_Stakeibc_MsgRegisterHostZone,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_MsgRegisterHostZone, Stride_Stakeibc_MsgRegisterHostZoneResponse> {
    return self.makeUnaryCall(
      path: "/stride.stakeibc.Msg/RegisterHostZone",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterHostZoneInterceptors() ?? []
    )
  }

  /// Unary call to ClaimUndelegatedTokens
  ///
  /// - Parameters:
  ///   - request: Request to send to ClaimUndelegatedTokens.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func claimUndelegatedTokens(
    _ request: Stride_Stakeibc_MsgClaimUndelegatedTokens,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_MsgClaimUndelegatedTokens, Stride_Stakeibc_MsgClaimUndelegatedTokensResponse> {
    return self.makeUnaryCall(
      path: "/stride.stakeibc.Msg/ClaimUndelegatedTokens",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimUndelegatedTokensInterceptors() ?? []
    )
  }

  /// Unary call to RebalanceValidators
  ///
  /// - Parameters:
  ///   - request: Request to send to RebalanceValidators.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rebalanceValidators(
    _ request: Stride_Stakeibc_MsgRebalanceValidators,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_MsgRebalanceValidators, Stride_Stakeibc_MsgRebalanceValidatorsResponse> {
    return self.makeUnaryCall(
      path: "/stride.stakeibc.Msg/RebalanceValidators",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRebalanceValidatorsInterceptors() ?? []
    )
  }

  /// Unary call to AddValidator
  ///
  /// - Parameters:
  ///   - request: Request to send to AddValidator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addValidator(
    _ request: Stride_Stakeibc_MsgAddValidator,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_MsgAddValidator, Stride_Stakeibc_MsgAddValidatorResponse> {
    return self.makeUnaryCall(
      path: "/stride.stakeibc.Msg/AddValidator",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddValidatorInterceptors() ?? []
    )
  }

  /// Unary call to ChangeValidatorWeight
  ///
  /// - Parameters:
  ///   - request: Request to send to ChangeValidatorWeight.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func changeValidatorWeight(
    _ request: Stride_Stakeibc_MsgChangeValidatorWeight,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_MsgChangeValidatorWeight, Stride_Stakeibc_MsgChangeValidatorWeightResponse> {
    return self.makeUnaryCall(
      path: "/stride.stakeibc.Msg/ChangeValidatorWeight",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChangeValidatorWeightInterceptors() ?? []
    )
  }

  /// Unary call to DeleteValidator
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteValidator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteValidator(
    _ request: Stride_Stakeibc_MsgDeleteValidator,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_MsgDeleteValidator, Stride_Stakeibc_MsgDeleteValidatorResponse> {
    return self.makeUnaryCall(
      path: "/stride.stakeibc.Msg/DeleteValidator",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteValidatorInterceptors() ?? []
    )
  }

  /// Unary call to RestoreInterchainAccount
  ///
  /// - Parameters:
  ///   - request: Request to send to RestoreInterchainAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func restoreInterchainAccount(
    _ request: Stride_Stakeibc_MsgRestoreInterchainAccount,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_MsgRestoreInterchainAccount, Stride_Stakeibc_MsgRestoreInterchainAccountResponse> {
    return self.makeUnaryCall(
      path: "/stride.stakeibc.Msg/RestoreInterchainAccount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRestoreInterchainAccountInterceptors() ?? []
    )
  }

  /// Unary call to UpdateValidatorSharesExchRate
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateValidatorSharesExchRate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateValidatorSharesExchRate(
    _ request: Stride_Stakeibc_MsgUpdateValidatorSharesExchRate,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_MsgUpdateValidatorSharesExchRate, Stride_Stakeibc_MsgUpdateValidatorSharesExchRateResponse> {
    return self.makeUnaryCall(
      path: "/stride.stakeibc.Msg/UpdateValidatorSharesExchRate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateValidatorSharesExchRateInterceptors() ?? []
    )
  }

  /// Unary call to ClearBalance
  ///
  /// - Parameters:
  ///   - request: Request to send to ClearBalance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func clearBalance(
    _ request: Stride_Stakeibc_MsgClearBalance,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_MsgClearBalance, Stride_Stakeibc_MsgClearBalanceResponse> {
    return self.makeUnaryCall(
      path: "/stride.stakeibc.Msg/ClearBalance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClearBalanceInterceptors() ?? []
    )
  }

  /// Unary call to ResetUnbondingRecordEpochNumbers
  ///
  /// - Parameters:
  ///   - request: Request to send to ResetUnbondingRecordEpochNumbers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func resetUnbondingRecordEpochNumbers(
    _ request: Stride_Stakeibc_MsgResetUnbondingRecordEpochNumbers,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_MsgResetUnbondingRecordEpochNumbers, Stride_Stakeibc_MsgResetUnbondingRecordEpochNumbersResponse> {
    return self.makeUnaryCall(
      path: "/stride.stakeibc.Msg/ResetUnbondingRecordEpochNumbers",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResetUnbondingRecordEpochNumbersInterceptors() ?? []
    )
  }
}

internal protocol Stride_Stakeibc_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'liquidStake'.
  func makeLiquidStakeInterceptors() -> [ClientInterceptor<Stride_Stakeibc_MsgLiquidStake, Stride_Stakeibc_MsgLiquidStakeResponse>]

  /// - Returns: Interceptors to use when invoking 'redeemStake'.
  func makeRedeemStakeInterceptors() -> [ClientInterceptor<Stride_Stakeibc_MsgRedeemStake, Stride_Stakeibc_MsgRedeemStakeResponse>]

  /// - Returns: Interceptors to use when invoking 'registerHostZone'.
  func makeRegisterHostZoneInterceptors() -> [ClientInterceptor<Stride_Stakeibc_MsgRegisterHostZone, Stride_Stakeibc_MsgRegisterHostZoneResponse>]

  /// - Returns: Interceptors to use when invoking 'claimUndelegatedTokens'.
  func makeClaimUndelegatedTokensInterceptors() -> [ClientInterceptor<Stride_Stakeibc_MsgClaimUndelegatedTokens, Stride_Stakeibc_MsgClaimUndelegatedTokensResponse>]

  /// - Returns: Interceptors to use when invoking 'rebalanceValidators'.
  func makeRebalanceValidatorsInterceptors() -> [ClientInterceptor<Stride_Stakeibc_MsgRebalanceValidators, Stride_Stakeibc_MsgRebalanceValidatorsResponse>]

  /// - Returns: Interceptors to use when invoking 'addValidator'.
  func makeAddValidatorInterceptors() -> [ClientInterceptor<Stride_Stakeibc_MsgAddValidator, Stride_Stakeibc_MsgAddValidatorResponse>]

  /// - Returns: Interceptors to use when invoking 'changeValidatorWeight'.
  func makeChangeValidatorWeightInterceptors() -> [ClientInterceptor<Stride_Stakeibc_MsgChangeValidatorWeight, Stride_Stakeibc_MsgChangeValidatorWeightResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteValidator'.
  func makeDeleteValidatorInterceptors() -> [ClientInterceptor<Stride_Stakeibc_MsgDeleteValidator, Stride_Stakeibc_MsgDeleteValidatorResponse>]

  /// - Returns: Interceptors to use when invoking 'restoreInterchainAccount'.
  func makeRestoreInterchainAccountInterceptors() -> [ClientInterceptor<Stride_Stakeibc_MsgRestoreInterchainAccount, Stride_Stakeibc_MsgRestoreInterchainAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'updateValidatorSharesExchRate'.
  func makeUpdateValidatorSharesExchRateInterceptors() -> [ClientInterceptor<Stride_Stakeibc_MsgUpdateValidatorSharesExchRate, Stride_Stakeibc_MsgUpdateValidatorSharesExchRateResponse>]

  /// - Returns: Interceptors to use when invoking 'clearBalance'.
  func makeClearBalanceInterceptors() -> [ClientInterceptor<Stride_Stakeibc_MsgClearBalance, Stride_Stakeibc_MsgClearBalanceResponse>]

  /// - Returns: Interceptors to use when invoking 'resetUnbondingRecordEpochNumbers'.
  func makeResetUnbondingRecordEpochNumbersInterceptors() -> [ClientInterceptor<Stride_Stakeibc_MsgResetUnbondingRecordEpochNumbers, Stride_Stakeibc_MsgResetUnbondingRecordEpochNumbersResponse>]
}

internal final class Stride_Stakeibc_MsgClient: Stride_Stakeibc_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Stride_Stakeibc_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the stride.stakeibc.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Stride_Stakeibc_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Stride_Stakeibc_MsgProvider: CallHandlerProvider {
  var interceptors: Stride_Stakeibc_MsgServerInterceptorFactoryProtocol? { get }

  func liquidStake(request: Stride_Stakeibc_MsgLiquidStake, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_MsgLiquidStakeResponse>

  func redeemStake(request: Stride_Stakeibc_MsgRedeemStake, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_MsgRedeemStakeResponse>

  func registerHostZone(request: Stride_Stakeibc_MsgRegisterHostZone, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_MsgRegisterHostZoneResponse>

  func claimUndelegatedTokens(request: Stride_Stakeibc_MsgClaimUndelegatedTokens, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_MsgClaimUndelegatedTokensResponse>

  func rebalanceValidators(request: Stride_Stakeibc_MsgRebalanceValidators, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_MsgRebalanceValidatorsResponse>

  func addValidator(request: Stride_Stakeibc_MsgAddValidator, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_MsgAddValidatorResponse>

  func changeValidatorWeight(request: Stride_Stakeibc_MsgChangeValidatorWeight, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_MsgChangeValidatorWeightResponse>

  func deleteValidator(request: Stride_Stakeibc_MsgDeleteValidator, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_MsgDeleteValidatorResponse>

  func restoreInterchainAccount(request: Stride_Stakeibc_MsgRestoreInterchainAccount, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_MsgRestoreInterchainAccountResponse>

  func updateValidatorSharesExchRate(request: Stride_Stakeibc_MsgUpdateValidatorSharesExchRate, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_MsgUpdateValidatorSharesExchRateResponse>

  func clearBalance(request: Stride_Stakeibc_MsgClearBalance, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_MsgClearBalanceResponse>

  func resetUnbondingRecordEpochNumbers(request: Stride_Stakeibc_MsgResetUnbondingRecordEpochNumbers, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_MsgResetUnbondingRecordEpochNumbersResponse>
}

extension Stride_Stakeibc_MsgProvider {
  internal var serviceName: Substring { return "stride.stakeibc.Msg" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "LiquidStake":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_MsgLiquidStake>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_MsgLiquidStakeResponse>(),
        interceptors: self.interceptors?.makeLiquidStakeInterceptors() ?? [],
        userFunction: self.liquidStake(request:context:)
      )

    case "RedeemStake":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_MsgRedeemStake>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_MsgRedeemStakeResponse>(),
        interceptors: self.interceptors?.makeRedeemStakeInterceptors() ?? [],
        userFunction: self.redeemStake(request:context:)
      )

    case "RegisterHostZone":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_MsgRegisterHostZone>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_MsgRegisterHostZoneResponse>(),
        interceptors: self.interceptors?.makeRegisterHostZoneInterceptors() ?? [],
        userFunction: self.registerHostZone(request:context:)
      )

    case "ClaimUndelegatedTokens":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_MsgClaimUndelegatedTokens>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_MsgClaimUndelegatedTokensResponse>(),
        interceptors: self.interceptors?.makeClaimUndelegatedTokensInterceptors() ?? [],
        userFunction: self.claimUndelegatedTokens(request:context:)
      )

    case "RebalanceValidators":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_MsgRebalanceValidators>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_MsgRebalanceValidatorsResponse>(),
        interceptors: self.interceptors?.makeRebalanceValidatorsInterceptors() ?? [],
        userFunction: self.rebalanceValidators(request:context:)
      )

    case "AddValidator":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_MsgAddValidator>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_MsgAddValidatorResponse>(),
        interceptors: self.interceptors?.makeAddValidatorInterceptors() ?? [],
        userFunction: self.addValidator(request:context:)
      )

    case "ChangeValidatorWeight":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_MsgChangeValidatorWeight>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_MsgChangeValidatorWeightResponse>(),
        interceptors: self.interceptors?.makeChangeValidatorWeightInterceptors() ?? [],
        userFunction: self.changeValidatorWeight(request:context:)
      )

    case "DeleteValidator":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_MsgDeleteValidator>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_MsgDeleteValidatorResponse>(),
        interceptors: self.interceptors?.makeDeleteValidatorInterceptors() ?? [],
        userFunction: self.deleteValidator(request:context:)
      )

    case "RestoreInterchainAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_MsgRestoreInterchainAccount>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_MsgRestoreInterchainAccountResponse>(),
        interceptors: self.interceptors?.makeRestoreInterchainAccountInterceptors() ?? [],
        userFunction: self.restoreInterchainAccount(request:context:)
      )

    case "UpdateValidatorSharesExchRate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_MsgUpdateValidatorSharesExchRate>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_MsgUpdateValidatorSharesExchRateResponse>(),
        interceptors: self.interceptors?.makeUpdateValidatorSharesExchRateInterceptors() ?? [],
        userFunction: self.updateValidatorSharesExchRate(request:context:)
      )

    case "ClearBalance":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_MsgClearBalance>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_MsgClearBalanceResponse>(),
        interceptors: self.interceptors?.makeClearBalanceInterceptors() ?? [],
        userFunction: self.clearBalance(request:context:)
      )

    case "ResetUnbondingRecordEpochNumbers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_MsgResetUnbondingRecordEpochNumbers>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_MsgResetUnbondingRecordEpochNumbersResponse>(),
        interceptors: self.interceptors?.makeResetUnbondingRecordEpochNumbersInterceptors() ?? [],
        userFunction: self.resetUnbondingRecordEpochNumbers(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Stride_Stakeibc_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'liquidStake'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLiquidStakeInterceptors() -> [ServerInterceptor<Stride_Stakeibc_MsgLiquidStake, Stride_Stakeibc_MsgLiquidStakeResponse>]

  /// - Returns: Interceptors to use when handling 'redeemStake'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRedeemStakeInterceptors() -> [ServerInterceptor<Stride_Stakeibc_MsgRedeemStake, Stride_Stakeibc_MsgRedeemStakeResponse>]

  /// - Returns: Interceptors to use when handling 'registerHostZone'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterHostZoneInterceptors() -> [ServerInterceptor<Stride_Stakeibc_MsgRegisterHostZone, Stride_Stakeibc_MsgRegisterHostZoneResponse>]

  /// - Returns: Interceptors to use when handling 'claimUndelegatedTokens'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClaimUndelegatedTokensInterceptors() -> [ServerInterceptor<Stride_Stakeibc_MsgClaimUndelegatedTokens, Stride_Stakeibc_MsgClaimUndelegatedTokensResponse>]

  /// - Returns: Interceptors to use when handling 'rebalanceValidators'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRebalanceValidatorsInterceptors() -> [ServerInterceptor<Stride_Stakeibc_MsgRebalanceValidators, Stride_Stakeibc_MsgRebalanceValidatorsResponse>]

  /// - Returns: Interceptors to use when handling 'addValidator'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddValidatorInterceptors() -> [ServerInterceptor<Stride_Stakeibc_MsgAddValidator, Stride_Stakeibc_MsgAddValidatorResponse>]

  /// - Returns: Interceptors to use when handling 'changeValidatorWeight'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeChangeValidatorWeightInterceptors() -> [ServerInterceptor<Stride_Stakeibc_MsgChangeValidatorWeight, Stride_Stakeibc_MsgChangeValidatorWeightResponse>]

  /// - Returns: Interceptors to use when handling 'deleteValidator'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteValidatorInterceptors() -> [ServerInterceptor<Stride_Stakeibc_MsgDeleteValidator, Stride_Stakeibc_MsgDeleteValidatorResponse>]

  /// - Returns: Interceptors to use when handling 'restoreInterchainAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRestoreInterchainAccountInterceptors() -> [ServerInterceptor<Stride_Stakeibc_MsgRestoreInterchainAccount, Stride_Stakeibc_MsgRestoreInterchainAccountResponse>]

  /// - Returns: Interceptors to use when handling 'updateValidatorSharesExchRate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateValidatorSharesExchRateInterceptors() -> [ServerInterceptor<Stride_Stakeibc_MsgUpdateValidatorSharesExchRate, Stride_Stakeibc_MsgUpdateValidatorSharesExchRateResponse>]

  /// - Returns: Interceptors to use when handling 'clearBalance'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClearBalanceInterceptors() -> [ServerInterceptor<Stride_Stakeibc_MsgClearBalance, Stride_Stakeibc_MsgClearBalanceResponse>]

  /// - Returns: Interceptors to use when handling 'resetUnbondingRecordEpochNumbers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeResetUnbondingRecordEpochNumbersInterceptors() -> [ServerInterceptor<Stride_Stakeibc_MsgResetUnbondingRecordEpochNumbers, Stride_Stakeibc_MsgResetUnbondingRecordEpochNumbersResponse>]
}
