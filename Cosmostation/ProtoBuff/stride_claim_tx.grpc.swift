//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: stride/claim/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg defines the Msg service.
///
/// Usage: instantiate `Stride_Claim_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Stride_Claim_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Stride_Claim_MsgClientInterceptorFactoryProtocol? { get }

  func setAirdropAllocations(
    _ request: Stride_Claim_MsgSetAirdropAllocations,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Claim_MsgSetAirdropAllocations, Stride_Claim_MsgSetAirdropAllocationsResponse>

  func claimFreeAmount(
    _ request: Stride_Claim_MsgClaimFreeAmount,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Claim_MsgClaimFreeAmount, Stride_Claim_MsgClaimFreeAmountResponse>

  func createAirdrop(
    _ request: Stride_Claim_MsgCreateAirdrop,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Claim_MsgCreateAirdrop, Stride_Claim_MsgCreateAirdropResponse>

  func deleteAirdrop(
    _ request: Stride_Claim_MsgDeleteAirdrop,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Claim_MsgDeleteAirdrop, Stride_Claim_MsgDeleteAirdropResponse>
}

extension Stride_Claim_MsgClientProtocol {
  internal var serviceName: String {
    return "stride.claim.Msg"
  }

  /// Unary call to SetAirdropAllocations
  ///
  /// - Parameters:
  ///   - request: Request to send to SetAirdropAllocations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setAirdropAllocations(
    _ request: Stride_Claim_MsgSetAirdropAllocations,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Claim_MsgSetAirdropAllocations, Stride_Claim_MsgSetAirdropAllocationsResponse> {
    return self.makeUnaryCall(
      path: "/stride.claim.Msg/SetAirdropAllocations",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetAirdropAllocationsInterceptors() ?? []
    )
  }

  /// Unary call to ClaimFreeAmount
  ///
  /// - Parameters:
  ///   - request: Request to send to ClaimFreeAmount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func claimFreeAmount(
    _ request: Stride_Claim_MsgClaimFreeAmount,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Claim_MsgClaimFreeAmount, Stride_Claim_MsgClaimFreeAmountResponse> {
    return self.makeUnaryCall(
      path: "/stride.claim.Msg/ClaimFreeAmount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimFreeAmountInterceptors() ?? []
    )
  }

  /// Unary call to CreateAirdrop
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateAirdrop.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createAirdrop(
    _ request: Stride_Claim_MsgCreateAirdrop,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Claim_MsgCreateAirdrop, Stride_Claim_MsgCreateAirdropResponse> {
    return self.makeUnaryCall(
      path: "/stride.claim.Msg/CreateAirdrop",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAirdropInterceptors() ?? []
    )
  }

  /// Unary call to DeleteAirdrop
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteAirdrop.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteAirdrop(
    _ request: Stride_Claim_MsgDeleteAirdrop,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Claim_MsgDeleteAirdrop, Stride_Claim_MsgDeleteAirdropResponse> {
    return self.makeUnaryCall(
      path: "/stride.claim.Msg/DeleteAirdrop",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAirdropInterceptors() ?? []
    )
  }
}

internal protocol Stride_Claim_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'setAirdropAllocations'.
  func makeSetAirdropAllocationsInterceptors() -> [ClientInterceptor<Stride_Claim_MsgSetAirdropAllocations, Stride_Claim_MsgSetAirdropAllocationsResponse>]

  /// - Returns: Interceptors to use when invoking 'claimFreeAmount'.
  func makeClaimFreeAmountInterceptors() -> [ClientInterceptor<Stride_Claim_MsgClaimFreeAmount, Stride_Claim_MsgClaimFreeAmountResponse>]

  /// - Returns: Interceptors to use when invoking 'createAirdrop'.
  func makeCreateAirdropInterceptors() -> [ClientInterceptor<Stride_Claim_MsgCreateAirdrop, Stride_Claim_MsgCreateAirdropResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteAirdrop'.
  func makeDeleteAirdropInterceptors() -> [ClientInterceptor<Stride_Claim_MsgDeleteAirdrop, Stride_Claim_MsgDeleteAirdropResponse>]
}

internal final class Stride_Claim_MsgClient: Stride_Claim_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Stride_Claim_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the stride.claim.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Stride_Claim_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Stride_Claim_MsgProvider: CallHandlerProvider {
  var interceptors: Stride_Claim_MsgServerInterceptorFactoryProtocol? { get }

  func setAirdropAllocations(request: Stride_Claim_MsgSetAirdropAllocations, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Claim_MsgSetAirdropAllocationsResponse>

  func claimFreeAmount(request: Stride_Claim_MsgClaimFreeAmount, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Claim_MsgClaimFreeAmountResponse>

  func createAirdrop(request: Stride_Claim_MsgCreateAirdrop, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Claim_MsgCreateAirdropResponse>

  func deleteAirdrop(request: Stride_Claim_MsgDeleteAirdrop, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Claim_MsgDeleteAirdropResponse>
}

extension Stride_Claim_MsgProvider {
  internal var serviceName: Substring { return "stride.claim.Msg" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SetAirdropAllocations":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Claim_MsgSetAirdropAllocations>(),
        responseSerializer: ProtobufSerializer<Stride_Claim_MsgSetAirdropAllocationsResponse>(),
        interceptors: self.interceptors?.makeSetAirdropAllocationsInterceptors() ?? [],
        userFunction: self.setAirdropAllocations(request:context:)
      )

    case "ClaimFreeAmount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Claim_MsgClaimFreeAmount>(),
        responseSerializer: ProtobufSerializer<Stride_Claim_MsgClaimFreeAmountResponse>(),
        interceptors: self.interceptors?.makeClaimFreeAmountInterceptors() ?? [],
        userFunction: self.claimFreeAmount(request:context:)
      )

    case "CreateAirdrop":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Claim_MsgCreateAirdrop>(),
        responseSerializer: ProtobufSerializer<Stride_Claim_MsgCreateAirdropResponse>(),
        interceptors: self.interceptors?.makeCreateAirdropInterceptors() ?? [],
        userFunction: self.createAirdrop(request:context:)
      )

    case "DeleteAirdrop":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Claim_MsgDeleteAirdrop>(),
        responseSerializer: ProtobufSerializer<Stride_Claim_MsgDeleteAirdropResponse>(),
        interceptors: self.interceptors?.makeDeleteAirdropInterceptors() ?? [],
        userFunction: self.deleteAirdrop(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Stride_Claim_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'setAirdropAllocations'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetAirdropAllocationsInterceptors() -> [ServerInterceptor<Stride_Claim_MsgSetAirdropAllocations, Stride_Claim_MsgSetAirdropAllocationsResponse>]

  /// - Returns: Interceptors to use when handling 'claimFreeAmount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClaimFreeAmountInterceptors() -> [ServerInterceptor<Stride_Claim_MsgClaimFreeAmount, Stride_Claim_MsgClaimFreeAmountResponse>]

  /// - Returns: Interceptors to use when handling 'createAirdrop'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateAirdropInterceptors() -> [ServerInterceptor<Stride_Claim_MsgCreateAirdrop, Stride_Claim_MsgCreateAirdropResponse>]

  /// - Returns: Interceptors to use when handling 'deleteAirdrop'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteAirdropInterceptors() -> [ServerInterceptor<Stride_Claim_MsgDeleteAirdrop, Stride_Claim_MsgDeleteAirdropResponse>]
}
