//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: stride/records/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Stride_Records_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Stride_Records_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Stride_Records_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Stride_Records_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Records_QueryParamsRequest, Stride_Records_QueryParamsResponse>

  func userRedemptionRecord(
    _ request: Stride_Records_QueryGetUserRedemptionRecordRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Records_QueryGetUserRedemptionRecordRequest, Stride_Records_QueryGetUserRedemptionRecordResponse>

  func userRedemptionRecordAll(
    _ request: Stride_Records_QueryAllUserRedemptionRecordRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Records_QueryAllUserRedemptionRecordRequest, Stride_Records_QueryAllUserRedemptionRecordResponse>

  func userRedemptionRecordForUser(
    _ request: Stride_Records_QueryAllUserRedemptionRecordForUserRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Records_QueryAllUserRedemptionRecordForUserRequest, Stride_Records_QueryAllUserRedemptionRecordForUserResponse>

  func epochUnbondingRecord(
    _ request: Stride_Records_QueryGetEpochUnbondingRecordRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Records_QueryGetEpochUnbondingRecordRequest, Stride_Records_QueryGetEpochUnbondingRecordResponse>

  func epochUnbondingRecordAll(
    _ request: Stride_Records_QueryAllEpochUnbondingRecordRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Records_QueryAllEpochUnbondingRecordRequest, Stride_Records_QueryAllEpochUnbondingRecordResponse>

  func depositRecord(
    _ request: Stride_Records_QueryGetDepositRecordRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Records_QueryGetDepositRecordRequest, Stride_Records_QueryGetDepositRecordResponse>

  func depositRecordAll(
    _ request: Stride_Records_QueryAllDepositRecordRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Records_QueryAllDepositRecordRequest, Stride_Records_QueryAllDepositRecordResponse>
}

extension Stride_Records_QueryClientProtocol {
  internal var serviceName: String {
    return "stride.records.Query"
  }

  /// Parameters queries the parameters of the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Stride_Records_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Records_QueryParamsRequest, Stride_Records_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: "/stride.records.Query/Params",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Queries a UserRedemptionRecord by id.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserRedemptionRecord.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func userRedemptionRecord(
    _ request: Stride_Records_QueryGetUserRedemptionRecordRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Records_QueryGetUserRedemptionRecordRequest, Stride_Records_QueryGetUserRedemptionRecordResponse> {
    return self.makeUnaryCall(
      path: "/stride.records.Query/UserRedemptionRecord",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserRedemptionRecordInterceptors() ?? []
    )
  }

  /// Queries a list of UserRedemptionRecord items.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserRedemptionRecordAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func userRedemptionRecordAll(
    _ request: Stride_Records_QueryAllUserRedemptionRecordRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Records_QueryAllUserRedemptionRecordRequest, Stride_Records_QueryAllUserRedemptionRecordResponse> {
    return self.makeUnaryCall(
      path: "/stride.records.Query/UserRedemptionRecordAll",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserRedemptionRecordAllInterceptors() ?? []
    )
  }

  /// Queries a list of UserRedemptionRecord items by chainId / userId pair.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserRedemptionRecordForUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func userRedemptionRecordForUser(
    _ request: Stride_Records_QueryAllUserRedemptionRecordForUserRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Records_QueryAllUserRedemptionRecordForUserRequest, Stride_Records_QueryAllUserRedemptionRecordForUserResponse> {
    return self.makeUnaryCall(
      path: "/stride.records.Query/UserRedemptionRecordForUser",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserRedemptionRecordForUserInterceptors() ?? []
    )
  }

  /// Queries a EpochUnbondingRecord by id.
  ///
  /// - Parameters:
  ///   - request: Request to send to EpochUnbondingRecord.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func epochUnbondingRecord(
    _ request: Stride_Records_QueryGetEpochUnbondingRecordRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Records_QueryGetEpochUnbondingRecordRequest, Stride_Records_QueryGetEpochUnbondingRecordResponse> {
    return self.makeUnaryCall(
      path: "/stride.records.Query/EpochUnbondingRecord",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochUnbondingRecordInterceptors() ?? []
    )
  }

  /// Queries a list of EpochUnbondingRecord items.
  ///
  /// - Parameters:
  ///   - request: Request to send to EpochUnbondingRecordAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func epochUnbondingRecordAll(
    _ request: Stride_Records_QueryAllEpochUnbondingRecordRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Records_QueryAllEpochUnbondingRecordRequest, Stride_Records_QueryAllEpochUnbondingRecordResponse> {
    return self.makeUnaryCall(
      path: "/stride.records.Query/EpochUnbondingRecordAll",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochUnbondingRecordAllInterceptors() ?? []
    )
  }

  /// Queries a DepositRecord by id.
  ///
  /// - Parameters:
  ///   - request: Request to send to DepositRecord.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func depositRecord(
    _ request: Stride_Records_QueryGetDepositRecordRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Records_QueryGetDepositRecordRequest, Stride_Records_QueryGetDepositRecordResponse> {
    return self.makeUnaryCall(
      path: "/stride.records.Query/DepositRecord",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositRecordInterceptors() ?? []
    )
  }

  /// Queries a list of DepositRecord items.
  ///
  /// - Parameters:
  ///   - request: Request to send to DepositRecordAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func depositRecordAll(
    _ request: Stride_Records_QueryAllDepositRecordRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Records_QueryAllDepositRecordRequest, Stride_Records_QueryAllDepositRecordResponse> {
    return self.makeUnaryCall(
      path: "/stride.records.Query/DepositRecordAll",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositRecordAllInterceptors() ?? []
    )
  }
}

internal protocol Stride_Records_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Stride_Records_QueryParamsRequest, Stride_Records_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'userRedemptionRecord'.
  func makeUserRedemptionRecordInterceptors() -> [ClientInterceptor<Stride_Records_QueryGetUserRedemptionRecordRequest, Stride_Records_QueryGetUserRedemptionRecordResponse>]

  /// - Returns: Interceptors to use when invoking 'userRedemptionRecordAll'.
  func makeUserRedemptionRecordAllInterceptors() -> [ClientInterceptor<Stride_Records_QueryAllUserRedemptionRecordRequest, Stride_Records_QueryAllUserRedemptionRecordResponse>]

  /// - Returns: Interceptors to use when invoking 'userRedemptionRecordForUser'.
  func makeUserRedemptionRecordForUserInterceptors() -> [ClientInterceptor<Stride_Records_QueryAllUserRedemptionRecordForUserRequest, Stride_Records_QueryAllUserRedemptionRecordForUserResponse>]

  /// - Returns: Interceptors to use when invoking 'epochUnbondingRecord'.
  func makeEpochUnbondingRecordInterceptors() -> [ClientInterceptor<Stride_Records_QueryGetEpochUnbondingRecordRequest, Stride_Records_QueryGetEpochUnbondingRecordResponse>]

  /// - Returns: Interceptors to use when invoking 'epochUnbondingRecordAll'.
  func makeEpochUnbondingRecordAllInterceptors() -> [ClientInterceptor<Stride_Records_QueryAllEpochUnbondingRecordRequest, Stride_Records_QueryAllEpochUnbondingRecordResponse>]

  /// - Returns: Interceptors to use when invoking 'depositRecord'.
  func makeDepositRecordInterceptors() -> [ClientInterceptor<Stride_Records_QueryGetDepositRecordRequest, Stride_Records_QueryGetDepositRecordResponse>]

  /// - Returns: Interceptors to use when invoking 'depositRecordAll'.
  func makeDepositRecordAllInterceptors() -> [ClientInterceptor<Stride_Records_QueryAllDepositRecordRequest, Stride_Records_QueryAllDepositRecordResponse>]
}

internal final class Stride_Records_QueryClient: Stride_Records_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Stride_Records_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the stride.records.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Stride_Records_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Stride_Records_QueryProvider: CallHandlerProvider {
  var interceptors: Stride_Records_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  func params(request: Stride_Records_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Records_QueryParamsResponse>

  /// Queries a UserRedemptionRecord by id.
  func userRedemptionRecord(request: Stride_Records_QueryGetUserRedemptionRecordRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Records_QueryGetUserRedemptionRecordResponse>

  /// Queries a list of UserRedemptionRecord items.
  func userRedemptionRecordAll(request: Stride_Records_QueryAllUserRedemptionRecordRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Records_QueryAllUserRedemptionRecordResponse>

  /// Queries a list of UserRedemptionRecord items by chainId / userId pair.
  func userRedemptionRecordForUser(request: Stride_Records_QueryAllUserRedemptionRecordForUserRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Records_QueryAllUserRedemptionRecordForUserResponse>

  /// Queries a EpochUnbondingRecord by id.
  func epochUnbondingRecord(request: Stride_Records_QueryGetEpochUnbondingRecordRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Records_QueryGetEpochUnbondingRecordResponse>

  /// Queries a list of EpochUnbondingRecord items.
  func epochUnbondingRecordAll(request: Stride_Records_QueryAllEpochUnbondingRecordRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Records_QueryAllEpochUnbondingRecordResponse>

  /// Queries a DepositRecord by id.
  func depositRecord(request: Stride_Records_QueryGetDepositRecordRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Records_QueryGetDepositRecordResponse>

  /// Queries a list of DepositRecord items.
  func depositRecordAll(request: Stride_Records_QueryAllDepositRecordRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Records_QueryAllDepositRecordResponse>
}

extension Stride_Records_QueryProvider {
  internal var serviceName: Substring { return "stride.records.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Records_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Records_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "UserRedemptionRecord":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Records_QueryGetUserRedemptionRecordRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Records_QueryGetUserRedemptionRecordResponse>(),
        interceptors: self.interceptors?.makeUserRedemptionRecordInterceptors() ?? [],
        userFunction: self.userRedemptionRecord(request:context:)
      )

    case "UserRedemptionRecordAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Records_QueryAllUserRedemptionRecordRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Records_QueryAllUserRedemptionRecordResponse>(),
        interceptors: self.interceptors?.makeUserRedemptionRecordAllInterceptors() ?? [],
        userFunction: self.userRedemptionRecordAll(request:context:)
      )

    case "UserRedemptionRecordForUser":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Records_QueryAllUserRedemptionRecordForUserRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Records_QueryAllUserRedemptionRecordForUserResponse>(),
        interceptors: self.interceptors?.makeUserRedemptionRecordForUserInterceptors() ?? [],
        userFunction: self.userRedemptionRecordForUser(request:context:)
      )

    case "EpochUnbondingRecord":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Records_QueryGetEpochUnbondingRecordRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Records_QueryGetEpochUnbondingRecordResponse>(),
        interceptors: self.interceptors?.makeEpochUnbondingRecordInterceptors() ?? [],
        userFunction: self.epochUnbondingRecord(request:context:)
      )

    case "EpochUnbondingRecordAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Records_QueryAllEpochUnbondingRecordRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Records_QueryAllEpochUnbondingRecordResponse>(),
        interceptors: self.interceptors?.makeEpochUnbondingRecordAllInterceptors() ?? [],
        userFunction: self.epochUnbondingRecordAll(request:context:)
      )

    case "DepositRecord":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Records_QueryGetDepositRecordRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Records_QueryGetDepositRecordResponse>(),
        interceptors: self.interceptors?.makeDepositRecordInterceptors() ?? [],
        userFunction: self.depositRecord(request:context:)
      )

    case "DepositRecordAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Records_QueryAllDepositRecordRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Records_QueryAllDepositRecordResponse>(),
        interceptors: self.interceptors?.makeDepositRecordAllInterceptors() ?? [],
        userFunction: self.depositRecordAll(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Stride_Records_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Stride_Records_QueryParamsRequest, Stride_Records_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'userRedemptionRecord'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUserRedemptionRecordInterceptors() -> [ServerInterceptor<Stride_Records_QueryGetUserRedemptionRecordRequest, Stride_Records_QueryGetUserRedemptionRecordResponse>]

  /// - Returns: Interceptors to use when handling 'userRedemptionRecordAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUserRedemptionRecordAllInterceptors() -> [ServerInterceptor<Stride_Records_QueryAllUserRedemptionRecordRequest, Stride_Records_QueryAllUserRedemptionRecordResponse>]

  /// - Returns: Interceptors to use when handling 'userRedemptionRecordForUser'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUserRedemptionRecordForUserInterceptors() -> [ServerInterceptor<Stride_Records_QueryAllUserRedemptionRecordForUserRequest, Stride_Records_QueryAllUserRedemptionRecordForUserResponse>]

  /// - Returns: Interceptors to use when handling 'epochUnbondingRecord'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEpochUnbondingRecordInterceptors() -> [ServerInterceptor<Stride_Records_QueryGetEpochUnbondingRecordRequest, Stride_Records_QueryGetEpochUnbondingRecordResponse>]

  /// - Returns: Interceptors to use when handling 'epochUnbondingRecordAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEpochUnbondingRecordAllInterceptors() -> [ServerInterceptor<Stride_Records_QueryAllEpochUnbondingRecordRequest, Stride_Records_QueryAllEpochUnbondingRecordResponse>]

  /// - Returns: Interceptors to use when handling 'depositRecord'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDepositRecordInterceptors() -> [ServerInterceptor<Stride_Records_QueryGetDepositRecordRequest, Stride_Records_QueryGetDepositRecordResponse>]

  /// - Returns: Interceptors to use when handling 'depositRecordAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDepositRecordAllInterceptors() -> [ServerInterceptor<Stride_Records_QueryAllDepositRecordRequest, Stride_Records_QueryAllDepositRecordResponse>]
}
