// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tendermint/liquidity/v1beta1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// records the state of each pool after genesis export or import, used to check variables
struct Tendermint_Liquidity_V1beta1_PoolRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pool: Tendermint_Liquidity_V1beta1_Pool {
    get {return _pool ?? Tendermint_Liquidity_V1beta1_Pool()}
    set {_pool = newValue}
  }
  /// Returns true if `pool` has been explicitly set.
  var hasPool: Bool {return self._pool != nil}
  /// Clears the value of `pool`. Subsequent reads from it will return its default value.
  mutating func clearPool() {self._pool = nil}

  var poolMetadata: Tendermint_Liquidity_V1beta1_PoolMetadata {
    get {return _poolMetadata ?? Tendermint_Liquidity_V1beta1_PoolMetadata()}
    set {_poolMetadata = newValue}
  }
  /// Returns true if `poolMetadata` has been explicitly set.
  var hasPoolMetadata: Bool {return self._poolMetadata != nil}
  /// Clears the value of `poolMetadata`. Subsequent reads from it will return its default value.
  mutating func clearPoolMetadata() {self._poolMetadata = nil}

  var poolBatch: Tendermint_Liquidity_V1beta1_PoolBatch {
    get {return _poolBatch ?? Tendermint_Liquidity_V1beta1_PoolBatch()}
    set {_poolBatch = newValue}
  }
  /// Returns true if `poolBatch` has been explicitly set.
  var hasPoolBatch: Bool {return self._poolBatch != nil}
  /// Clears the value of `poolBatch`. Subsequent reads from it will return its default value.
  mutating func clearPoolBatch() {self._poolBatch = nil}

  var depositMsgStates: [Tendermint_Liquidity_V1beta1_DepositMsgState] = []

  var withdrawMsgStates: [Tendermint_Liquidity_V1beta1_WithdrawMsgState] = []

  var swapMsgStates: [Tendermint_Liquidity_V1beta1_SwapMsgState] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pool: Tendermint_Liquidity_V1beta1_Pool? = nil
  fileprivate var _poolMetadata: Tendermint_Liquidity_V1beta1_PoolMetadata? = nil
  fileprivate var _poolBatch: Tendermint_Liquidity_V1beta1_PoolBatch? = nil
}

/// GenesisState defines the liquidity module's genesis state.
struct Tendermint_Liquidity_V1beta1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// params defines all the parameters for the liquidity module.
  var params: Tendermint_Liquidity_V1beta1_Params {
    get {return _params ?? Tendermint_Liquidity_V1beta1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var poolRecords: [Tendermint_Liquidity_V1beta1_PoolRecord] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Tendermint_Liquidity_V1beta1_Params? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tendermint.liquidity.v1beta1"

extension Tendermint_Liquidity_V1beta1_PoolRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PoolRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pool"),
    2: .standard(proto: "pool_metadata"),
    3: .standard(proto: "pool_batch"),
    4: .standard(proto: "deposit_msg_states"),
    5: .standard(proto: "withdraw_msg_states"),
    6: .standard(proto: "swap_msg_states"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._pool)
      case 2: try decoder.decodeSingularMessageField(value: &self._poolMetadata)
      case 3: try decoder.decodeSingularMessageField(value: &self._poolBatch)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.depositMsgStates)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.withdrawMsgStates)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.swapMsgStates)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._pool {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._poolMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._poolBatch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.depositMsgStates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.depositMsgStates, fieldNumber: 4)
    }
    if !self.withdrawMsgStates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.withdrawMsgStates, fieldNumber: 5)
    }
    if !self.swapMsgStates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.swapMsgStates, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Liquidity_V1beta1_PoolRecord, rhs: Tendermint_Liquidity_V1beta1_PoolRecord) -> Bool {
    if lhs._pool != rhs._pool {return false}
    if lhs._poolMetadata != rhs._poolMetadata {return false}
    if lhs._poolBatch != rhs._poolBatch {return false}
    if lhs.depositMsgStates != rhs.depositMsgStates {return false}
    if lhs.withdrawMsgStates != rhs.withdrawMsgStates {return false}
    if lhs.swapMsgStates != rhs.swapMsgStates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Liquidity_V1beta1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .standard(proto: "pool_records"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._params)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.poolRecords)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.poolRecords.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.poolRecords, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Liquidity_V1beta1_GenesisState, rhs: Tendermint_Liquidity_V1beta1_GenesisState) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.poolRecords != rhs.poolRecords {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
